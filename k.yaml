apiVersion: v1
kind: Namespace
metadata:
  name: ades
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zoo-project-dru
    app.kubernetes.io/version: 0.1.8
    helm.sh/chart: zoo-project-dru-0.2.6
  name: zoo-project-dru
  namespace: ades
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zoo-project-dru
    app.kubernetes.io/version: 0.1.8
    helm.sh/chart: zoo-project-dru-0.2.6
  name: zoo-project-dru-processing-manager
  namespace: ades
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.12.10
    helm.sh/chart: rabbitmq-12.5.4
  name: zoo-project-dru-rabbitmq
  namespace: ades
secrets:
- name: zoo-project-dru-rabbitmq
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.12.10
    helm.sh/chart: rabbitmq-12.5.4
  name: zoo-project-dru-rabbitmq-endpoint-reader
  namespace: ades
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.12.10
    helm.sh/chart: rabbitmq-12.5.4
  name: zoo-project-dru-rabbitmq-endpoint-reader
  namespace: ades
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: zoo-project-dru-rabbitmq-endpoint-reader
subjects:
- kind: ServiceAccount
  name: zoo-project-dru-rabbitmq
  namespace: ades
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: zoo-project-dru-processing
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: zoo-project-dru-processing-manager
  namespace: ades
---
apiVersion: v1
data:
  1-schema.sql: "--------------------------------------------------------------------------------\n--\n--
    PostgreSQL definition of tables required byt the ZOO-Kernel version >= 1.5.0\n--
    if the the db-backend option is activated\n--\n-- Copyright (C) 2015 GeoLabs SARL.
    All rights reserved.\n-- Author: David Saggiorato <david.saggiorato@geolabs.fr>\n--\n--
    Permission is hereby granted, free of charge, to any person obtaining a copy\n--
    of this software and associated documentation files (the \"Software\"), to deal\n--
    in the Software without restriction, including without limitation the rights\n--
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n--
    copies of the Software, and to permit persons to whom the Software is\n-- furnished
    to do so, subject to the following conditions:\n--\n-- The above copyright notice
    and this permission notice shall be included in\n-- all copies or substantial
    portions of the Software.\n--\n-- THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT
    WARRANTY OF ANY KIND, EXPRESS OR\n-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    WARRANTIES OF MERCHANTABILITY,\n-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE\n-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER\n-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ARISING FROM,\n-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN\n-- THE SOFTWARE.\n--\n--------------------------------------------------------------------------------
    \n-- If your database is not using UTF-8 per default then uncomment the following
    \n-- SET client_encoding = 'UTF8';\n--------------------------------------------------------------------------------
    \n-- Create a dedicated schema to store all tables\n-- Uncomment the following
    2 lines to activate the schema use\n-- CREATE SCHEMA processdb;\n-- SET search_path
    TO processdb;\n--------------------------------------------------------------------------------\n--
    Users table \n-- Used to store the user name provided in case of authentication\ncreate
    table users (\n       id serial PRIMARY KEY,\n       name varchar(255),\n       provider
    varchar(255),\n       creation_time timestamp with time zone default now(),\n
    \      access_time timestamp with time zone default now()\n);\nINSERT INTO users
    (id,name,provider) VALUES (0,'anonymous','unknown');\n--------------------------------------------------------------------------------\n--
    Services table\n-- Used to store information about services running asynchronously\ncreate
    table services (\n       osid TEXT,\n       sid TEXT,\n       uuid TEXT unique,\n
    \      processid TEXT,\n       fstate varchar(25),\n       status TEXT,\n       response
    TEXT,\n       creation_time timestamp with time zone default now(),\n       start_time
    timestamp with time zone default now(),\n       updated_time timestamp with time
    zone default now(),\n       finished_time timestamp with time zone default NULL,\n
    \      end_time timestamp with time zone default NULL,\n       progress int,\n
    \      itype varchar(10),\n       message TEXT,\n       user_id int REFERENCES
    users(id) ON DELETE CASCADE\n);\n--------------------------------------------------------------------------------\n--
    Responses table \n-- Used to store the response provided by a services running
    asynchronously\ncreate table responses (\n       uuid text references services(uuid)
    ON DELETE CASCADE,\n       content text,\n       creation_time timestamp with
    time zone default now()\n);\n--------------------------------------------------------------------------------\n--
    Files table\n-- Used to store the files generated during the service execution\ncreate
    table files (\n       uuid TEXT references services(uuid) ON DELETE CASCADE,\n
    \      filename text,\n       nature varchar(10),\n       name varchar(255),\n
    \      creation_time timestamp with time zone default now(),\n       expiration_time
    timestamp with time zone default now() + interval '48 hours'\n);\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n--
    Function to display date respecting the RFC 3339\nCREATE OR REPLACE FUNCTION display_date_rfc3339(param_in
    timestamp with time zone)\nRETURNS text AS\n$$\nDECLARE var_out varchar;\nBEGIN\n\tPERFORM
    set_config('timezone', 'UTC', true);\n\tvar_out := to_char(param_in , 'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"');\n\tRETURN
    var_out;\nEND;\n$$ language plpgsql VOLATILE;\n--------------------------------------------------------------------------------"
  2-schema.sql: "--------------------------------------------------------------------------------\n--\n--
    PostgreSQL definition of tables required byt the ZOO-Kernel version >= 1.8.0\n--
    if the the rabbitmq option is activated\n--\n-- Copyright (C) 2020 GeoLabs SARL.
    All rights reserved.\n-- Author: GÃ©rald Fenoy <gerald.fenoy@geolabs.fr>\n--\n--
    Permission is hereby granted, free of charge, to any person obtaining a copy\n--
    of this software and associated documentation files (the \"Software\"), to deal\n--
    in the Software without restriction, including without limitation the rights\n--
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n--
    copies of the Software, and to permit persons to whom the Software is\n-- furnished
    to do so, subject to the following conditions:\n--\n-- The above copyright notice
    and this permission notice shall be included in\n-- all copies or substantial
    portions of the Software.\n--\n-- THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT
    WARRANTY OF ANY KIND, EXPRESS OR\n-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    WARRANTIES OF MERCHANTABILITY,\n-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE\n-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER\n-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ARISING FROM,\n-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN\n-- THE SOFTWARE.\n--\n--------------------------------------------------------------------------------
    \n-- If your database is not using UTF-8 per default then uncomment the following
    \n-- SET client_encoding = 'UTF8';\n--------------------------------------------------------------------------------
    \n-- Create a dedicated schema to store all tables\n-- Uncomment the following
    2 lines to activate the schema use\n-- CREATE SCHEMA processdb;\n-- SET search_path
    TO processdb;\n--------------------------------------------------------------------------------\nCREATE
    TABLE workers (\n       id serial primary key,\n       uuid text,\n       pid
    int,\n       status int,\n       creation_time timestamp with time zone default
    now(),\n       UNIQUE(uuid)\n);\n\n\nCREATE OR REPLACE FUNCTION checkAvailableExecutionSlot(schema
    text,uuid text, pid int) RETURNS boolean AS \n$BODY$\nDECLARE\n\tres int;\n        cnt
    int;\nBEGIN\n        EXECUTE 'SELECT count(*) from '||schema||'.workers where
    uuid = '''||uuid||'''' INTO cnt;\n\tIF cnt = 0  THEN\n\t   EXECUTE 'INSERT INTO
    '||schema||'.workers (uuid,pid,status) VALUES ('''||uuid||''','||pid||',1)';\n\t
    \  RETURN true;\n\tELSE\n\t   RETURN false;\n\tEND IF;\nEND;\n$BODY$\nLANGUAGE
    'plpgsql' COST 100.0 SECURITY INVOKER;\n"
  3-schema.sql: "--------------------------------------------------------------------------------\n--\n--
    PostgreSQL definition of tables required byt the ZOO-Kernel version >= 1.8.0\n--
    if the the metadb is activated\n--\n-- Copyright (C) 2018-2022 GeoLabs SARL. All
    rights reserved.\n-- Author: GÃ©rald Fenoy <gerald.fenoy@geolabs.fr>\n--\n-- Permission
    is hereby granted, free of charge, to any person obtaining a copy\n-- of this
    software and associated documentation files (the \"Software\"), to deal\n-- in
    the Software without restriction, including without limitation the rights\n--
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n--
    copies of the Software, and to permit persons to whom the Software is\n-- furnished
    to do so, subject to the following conditions:\n--\n-- The above copyright notice
    and this permission notice shall be included in\n-- all copies or substantial
    portions of the Software.\n--\n-- THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT
    WARRANTY OF ANY KIND, EXPRESS OR\n-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    WARRANTIES OF MERCHANTABILITY,\n-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE\n-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    DAMAGES OR OTHER\n-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ARISING FROM,\n-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN\n-- THE SOFTWARE.\n--\n--------------------------------------------------------------------------------\n--
    If your database is not using UTF-8 per default then uncomment the following\n--
    SET client_encoding = 'UTF8';\n--------------------------------------------------------------------------------\n\ncreate
    schema CollectionDB;\n\nset search_path = CollectionDB, pg_catalog;\n\nCREATE
    OR REPLACE FUNCTION update_Description() RETURNS trigger AS\n$$\nDECLARE\n\ti
    integer;\nBEGIN\n\tINSERT INTO CollectionDB.Descriptions (id) VALUES (NEW.id);\n\tRETURN
    NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE FUNCTION is_in_ows_DataDescription(i
    integer) RETURNS boolean\n    LANGUAGE plpgsql\n    AS $$\nDECLARE\n        res
    int;\n        mymax int;\nBEGIN\n\tSELECT id from CollectionDB.ows_DataDescription
    where id=i INTO res ;\n\tif res is NULL then\n\t   return false;\n\telse\n\t   return
    true;\n\tend if;\nEND;\n$$;\n\ncreate table CollectionDB.Descriptions (\n       id
    serial primary key\n);\n\ncreate table CollectionDB.ows_Metadata (\n       id
    serial primary key,\n       title text,\n       role text,\n       href text\n);\n\ncreate
    table CollectionDB.DescriptionsMetadataAssignment(\n       descriptions_id int
    references CollectionDB.Descriptions(id) ON DELETE CASCADE,\n       metadata_id
    int references CollectionDB.ows_Metadata(id) ON DELETE CASCADE\n);\n\ncreate table
    CollectionDB.ows_Keywords (\n    id serial primary key,\n    keyword varchar\n);\n\ncreate
    table CollectionDB.DescriptionsKeywordsAssignment(\n       descriptions_id int
    references CollectionDB.Descriptions(id) ON DELETE CASCADE,\n       keywords_id
    int references CollectionDB.ows_Keywords(id) ON DELETE CASCADE\n);\n\ncreate table
    CollectionDB.ows_AdditionalParameters (\n    id serial primary key,\n    title
    varchar,\n    role varchar,\n    href varchar\n);\n\ncreate table CollectionDB.DescriptionsAdditionalParametersAssignment
    (\n       descriptions_id int references CollectionDB.Descriptions(id) ON DELETE
    CASCADE,\n       additional_parameters_id int references CollectionDB.ows_AdditionalParameters(id)
    ON DELETE CASCADE\n);\n\n--\n-- See reference for primitive datatypes\n-- https://www.w3.org/TR/xmlschema-2/#built-in-primitive-datatypes\n--\ncreate
    table CollectionDB.PrimitiveDataTypes (\n       id serial primary key,\n       name
    varchar(255)\n);\nINSERT INTO CollectionDB.PrimitiveDataTypes (name) VALUES ('string');\nINSERT
    INTO CollectionDB.PrimitiveDataTypes (name) VALUES ('boolean');\nINSERT INTO CollectionDB.PrimitiveDataTypes
    (name) VALUES ('integer');\nINSERT INTO CollectionDB.PrimitiveDataTypes (name)
    VALUES ('float');\nINSERT INTO CollectionDB.PrimitiveDataTypes (name) VALUES ('double');\nINSERT
    INTO CollectionDB.PrimitiveDataTypes (name) VALUES ('duration');\nINSERT INTO
    CollectionDB.PrimitiveDataTypes (name) VALUES ('dateTime');\nINSERT INTO CollectionDB.PrimitiveDataTypes
    (name) VALUES ('time');\nINSERT INTO CollectionDB.PrimitiveDataTypes (name) VALUES
    ('date');\nINSERT INTO CollectionDB.PrimitiveDataTypes (name) VALUES ('gYearMonth');\nINSERT
    INTO CollectionDB.PrimitiveDataTypes (name) VALUES ('gYear');\nINSERT INTO CollectionDB.PrimitiveDataTypes
    (name) VALUES ('gMonthDay');\nINSERT INTO CollectionDB.PrimitiveDataTypes (name)
    VALUES ('gDay');\nINSERT INTO CollectionDB.PrimitiveDataTypes (name) VALUES ('gMonth');\nINSERT
    INTO CollectionDB.PrimitiveDataTypes (name) VALUES ('hexBinary');\nINSERT INTO
    CollectionDB.PrimitiveDataTypes (name) VALUES ('base64Binary');\nINSERT INTO CollectionDB.PrimitiveDataTypes
    (name) VALUES ('anyURI');\nINSERT INTO CollectionDB.PrimitiveDataTypes (name)
    VALUES ('QName');\nINSERT INTO CollectionDB.PrimitiveDataTypes (name) VALUES ('NOTATION');\n\n--\n--
    List all primitive formats\n--\ncreate table CollectionDB.PrimitiveFormats (\n
    \      id serial primary key,\n       mime_type varchar(255),\n       encoding
    varchar(15),\n       schema varchar(255)\n);\n\n-- https://tools.ietf.org/html/rfc4180\nINSERT
    INTO CollectionDB.PrimitiveFormats (mime_type,encoding) VALUES ('text/csv','utf-8');\nINSERT
    INTO CollectionDB.PrimitiveFormats (mime_type,encoding) VALUES ('text/css','utf-8');\nINSERT
    INTO CollectionDB.PrimitiveFormats (mime_type,encoding) VALUES ('text/html','utf-8');\nINSERT
    INTO CollectionDB.PrimitiveFormats (mime_type,encoding) VALUES ('text/javascript','utf-8');\nINSERT
    INTO CollectionDB.PrimitiveFormats (mime_type,encoding) VALUES ('text/plain','utf-8');\nINSERT
    INTO CollectionDB.PrimitiveFormats (mime_type,encoding,schema)\n       VALUES
    ('text/xml','utf-8','http://schema.opengis.net/gml/3.2.1/gml.xsd');\nINSERT INTO
    CollectionDB.PrimitiveFormats (mime_type,encoding,schema)\n       VALUES ('text/xml','utf-8','http://schema.opengis.net/gml/3.1.0/gml.xsd');\nINSERT
    INTO CollectionDB.PrimitiveFormats (mime_type,encoding) VALUES ('application/gml+xml','utf-8');\nINSERT
    INTO CollectionDB.PrimitiveFormats (mime_type,encoding) VALUES ('application/json','utf-8');\n--
    https://tools.ietf.org/html/rfc3302\nINSERT INTO CollectionDB.PrimitiveFormats
    (mime_type) VALUES ('image/tiff');\n-- https://www.ietf.org/rfc/rfc4047.txt\nINSERT
    INTO CollectionDB.PrimitiveFormats (mime_type) VALUES ('image/fits');\n-- https://tools.ietf.org/html/rfc3745\nINSERT
    INTO CollectionDB.PrimitiveFormats (mime_type) VALUES ('image/jp2');\nINSERT INTO
    CollectionDB.PrimitiveFormats (mime_type) VALUES ('image/png');\nINSERT INTO CollectionDB.PrimitiveFormats
    (mime_type) VALUES ('image/jpeg');\nINSERT INTO CollectionDB.PrimitiveFormats
    (mime_type) VALUES ('image/gif');\nINSERT INTO CollectionDB.PrimitiveFormats (mime_type)
    VALUES ('application/octet-stream');\nINSERT INTO CollectionDB.PrimitiveFormats
    (mime_type) VALUES ('application/vnd.google-earth.kml+xml');\n-- https://www.iana.org/assignments/media-types/application/zip\nINSERT
    INTO CollectionDB.PrimitiveFormats (mime_type) VALUES ('application/zip');\n--
    https://www.iana.org/assignments/media-types/application/xml\nINSERT INTO CollectionDB.PrimitiveFormats
    (mime_type,encoding) VALUES ('application/xml','utf-8');\n\ncreate table CollectionDB.ows_Format
    (\n    id serial primary key,\n    primitive_format_id int references CollectionDB.PrimitiveFormats(id)
    ON DELETE CASCADE,\n    maximum_megabytes int,\n    def boolean,\n\tuse_mapserver
    bool,\n\tms_styles text\n);\n\ncreate table CollectionDB.ows_DataDescription (\n
    \   id serial primary key,\n    format_id int references CollectionDB.ows_Format(id)
    ON DELETE CASCADE\n);\n\ncreate table CollectionDB.PrimitiveUom (\n\tid serial
    primary key,\n\tuom varchar\n);\n-- source : Open Geospatial Consortium - URNs
    of definitions in ogc namespace\ninsert into CollectionDB.PrimitiveUom (uom) values
    ('degree');\ninsert into CollectionDB.PrimitiveUom (uom) values ('radian');\ninsert
    into CollectionDB.PrimitiveUom (uom) values ('metre');\ninsert into CollectionDB.PrimitiveUom
    (uom) values ('unity');\n\ncreate table CollectionDB.LiteralDataDomain (\n    possible_literal_values
    varchar,\n    default_value varchar,\n    data_type_id int references CollectionDB.PrimitiveDataTypes(id)
    ON DELETE CASCADE,\n    uom int references CollectionDB.PrimitiveUom(id) ON DELETE
    CASCADE,\n    def boolean\n) inherits (CollectionDB.ows_DataDescription);\nalter
    table CollectionDB.LiteralDataDomain add constraint literal_data_domain_id unique
    (id);\n\ncreate table CollectionDB.BoundingBoxData (\n    epsg int\n) inherits
    (CollectionDB.ows_DataDescription);\nalter table CollectionDB.BoundingBoxData
    add constraint bounding_box_data_id unique (id);\n\ncreate table CollectionDB.ComplexData
    (\n) inherits (CollectionDB.ows_DataDescription);\nalter table CollectionDB.ComplexData
    add constraint complex_data_id unique (id);\n\ncreate table CollectionDB.AllowedValues
    (\n    id serial primary key,\n    allowed_value varchar(255)\n);\n\ncreate table
    CollectionDB.AllowedValuesAssignment (\n    id serial primary key,\n    literal_data_domain_id
    int references CollectionDB.LiteralDataDomain (id) ON DELETE CASCADE,\n    allowed_value_id
    int references CollectionDB.AllowedValues (id) ON DELETE CASCADE\n);\n\ncreate
    table CollectionDB.ows_AdditionalParameter (\n    id serial primary key,\n    key
    varchar,\n    value varchar,\n    additional_parameters_id int references CollectionDB.ows_AdditionalParameters(id)
    ON DELETE CASCADE\n);\n\ncreate table CollectionDB.ows_Input (\n    id int primary
    key default nextval('collectiondb.descriptions_id_seq'::regclass),\n    title
    text,\n    abstract text,\n    identifier varchar(255),\n    min_occurs int,\n
    \   max_occurs int\n); -- inherits (CollectionDB.Descriptions);\nalter table CollectionDB.ows_Input
    add constraint codb_input_id unique (id);\nCREATE TRIGGER ows_Input_proc AFTER
    INSERT ON CollectionDB.ows_Input FOR EACH ROW EXECUTE PROCEDURE update_Description();\n\ncreate
    table CollectionDB.ows_Output (\n    id int primary key default nextval('collectiondb.descriptions_id_seq'::regclass),\n
    \   title text,\n    abstract text,\n    identifier varchar(255)\n); --inherits
    (CollectionDB.Descriptions);\nalter table CollectionDB.ows_Output add constraint
    codb_output_id unique (id);\nCREATE TRIGGER ows_Output_proc AFTER INSERT ON CollectionDB.ows_Output
    FOR EACH ROW EXECUTE PROCEDURE update_Description();\n\ncreate table CollectionDB.zoo_PrivateMetadata
    (\n    id serial primary key,\n    identifier varchar,\n    metadata_date timestamp\n);\n\ncreate
    table CollectionDB.ows_Process (\n    id int primary key default nextval('collectiondb.descriptions_id_seq'::regclass),\n
    \   title text,\n    abstract text,\n    version varchar(50),\n    identifier
    varchar(255),\n    availability boolean,\n    mutable boolean,\n    process_description_xml
    text,\n    private_metadata_id int references CollectionDB.zoo_PrivateMetadata(id)
    ON DELETE CASCADE,\n    user_id int REFERENCES public.users(id) ON DELETE CASCADE\n);
    -- inherits (CollectionDB.Descriptions);\nalter table CollectionDB.ows_Process
    add constraint codb_process_id unique (id);\nalter table CollectionDB.ows_Process
    add constraint codb_process_identifier unique (identifier,user_id);\nCREATE TRIGGER
    ows_Process_proc AFTER INSERT ON CollectionDB.ows_Process FOR EACH ROW EXECUTE
    PROCEDURE update_Description();\n\ncreate table CollectionDB.InputInputAssignment
    (\n    id serial primary key,\n    parent_input int references CollectionDB.ows_Input(id)
    ON DELETE CASCADE,\n    child_input int references CollectionDB.ows_Input(id)
    ON DELETE CASCADE\n);\n\ncreate table CollectionDB.InputDataDescriptionAssignment
    (\n    id serial primary key,\n    input_id int references CollectionDB.ows_Input(id)
    ON DELETE CASCADE,\n    data_description_id int check (CollectionDB.is_in_ows_DataDescription(data_description_id))\n);\n\ncreate
    table CollectionDB.OutputOutputAssignment (\n    id serial primary key,\n    parent_output
    int references CollectionDB.ows_Output(id) ON DELETE CASCADE,\n    child_output
    int references CollectionDB.ows_Output(id) ON DELETE CASCADE\n);\n\ncreate table
    CollectionDB.OutputDataDescriptionAssignment (\n    id serial primary key,\n    output_id
    int references CollectionDB.ows_Output(id) ON DELETE CASCADE,\n    data_description_id
    int check (CollectionDB.is_in_ows_DataDescription(data_description_id))\n);\n\ncreate
    table CollectionDB.zoo_ServiceTypes (\n\tid serial primary key,\n\tservice_type
    varchar\n);\ninsert into CollectionDB.zoo_ServiceTypes (service_type) VALUES ('HPC');\ninsert
    into CollectionDB.zoo_ServiceTypes (service_type) VALUES ('C');\ninsert into CollectionDB.zoo_ServiceTypes
    (service_type) VALUES ('Java');\ninsert into CollectionDB.zoo_ServiceTypes (service_type)
    VALUES ('Mono');\ninsert into CollectionDB.zoo_ServiceTypes (service_type) VALUES
    ('JS');\ninsert into CollectionDB.zoo_ServiceTypes (service_type) VALUES ('PHP');\ninsert
    into CollectionDB.zoo_ServiceTypes (service_type) VALUES ('Python');\n\ninsert
    into CollectionDB.zoo_ServiceTypes (service_type) VALUES ('OTB');\n\ncreate table
    CollectionDB.zoo_DeploymentMetadata (\n    id serial primary key,\n    executable_name
    varchar,\n    configuration_identifier varchar,\n        service_type_id int references
    CollectionDB.zoo_ServiceTypes(id) ON DELETE CASCADE);\n\ncreate table CollectionDB.zoo_PrivateProcessInfo
    (\n    id serial primary key\n);\n\ncreate table CollectionDB.PrivateMetadataDeploymentMetadataAssignment
    (\n    id serial primary key,\n    private_metadata_id int references CollectionDB.zoo_PrivateMetadata(id)
    ON DELETE CASCADE,\n    deployment_metadata_id int references CollectionDB.zoo_DeploymentMetadata(id)
    ON DELETE CASCADE\n);\n\ncreate table CollectionDB.PrivateMetadataPrivateProcessInfoAssignment
    (\n    id serial primary key,\n    private_metadata_id int references CollectionDB.zoo_PrivateMetadata(id)
    ON DELETE CASCADE,\n    private_process_info_id int references CollectionDB.zoo_PrivateProcessInfo(id)
    ON DELETE CASCADE\n);\n\ncreate table CollectionDB.ProcessInputAssignment (\n
    \   id serial primary key,\n    process_id int references CollectionDB.ows_Process(id)
    ON DELETE CASCADE,\n    input_id int references CollectionDB.ows_Input(id) ON
    DELETE CASCADE,\n    index int\n);\n\ncreate table CollectionDB.ProcessOutputAssignment
    (\n    id serial primary key,\n    process_id int references CollectionDB.ows_Process(id)
    ON DELETE CASCADE,\n    output_id int references CollectionDB.ows_Output(id) ON
    DELETE CASCADE,\n    index int\n);\n\nCREATE OR REPLACE VIEW public.ows_process
    AS\n       (SELECT\n\tid,\n\tidentifier,\n\ttitle,\n\tabstract,\n    version,\n\t(SELECT
    service_type FROM CollectionDB.zoo_ServiceTypes WHERE id = (SELECT service_type_id
    FROM CollectionDB.zoo_DeploymentMetadata WHERE id = (SELECT deployment_metadata_id
    FROM CollectionDB.PrivateMetadataDeploymentmetadataAssignment WHERE private_metadata_id=(SELECT
    id FROM CollectionDB.zoo_PrivateMetadata WHERE id = CollectionDB.ows_Process.private_metadata_id))))
    as service_type,\n\t(SELECT executable_name FROM CollectionDB.zoo_DeploymentMetadata
    WHERE id = (SELECT deployment_metadata_id FROM CollectionDB.PrivateMetadataDeploymentmetadataAssignment
    WHERE private_metadata_id=(SELECT id FROM CollectionDB.zoo_PrivateMetadata WHERE
    id = CollectionDB.ows_Process.private_metadata_id))) as service_provider,\n\t(SELECT
    configuration_identifier FROM CollectionDB.zoo_DeploymentMetadata WHERE id = (SELECT
    deployment_metadata_id FROM CollectionDB.PrivateMetadataDeploymentmetadataAssignment
    WHERE private_metadata_id=(SELECT id FROM CollectionDB.zoo_PrivateMetadata WHERE
    id = CollectionDB.ows_Process.private_metadata_id))) as conf_id,\n\tmutable,\n\tavailability,\n\tuser_id\n\tFROM
    CollectionDB.ows_Process\n\tWHERE\n\t availability\n\t);"
kind: ConfigMap
metadata:
  name: postgresql-primary-init-scripts
  namespace: ades
---
apiVersion: v1
data:
  publish.py: "#!/usr/miniconda3/envs/ades-dev/bin/python\nimport os\nimport sys\nimport
    redis\ndata = sys.stdin.read();\n\nprint('Content-Type: text/html')\nprint('')\nprint('Environment
    variables')\nfor param in os.environ.keys():\n        print (\"<b>%20s</b>: %s<br/>\"
    % (param, os.environ[param]))\n\nprint(data)\n\nfrom urllib import parse\n\ntry:\n
    \   params=parse.parse_qs(os.environ[\"QUERY_STRING\"])\n    r=None\n    if \"ZOO_REDIS_HOST\"
    in os.environ:\n        r = redis.Redis(host=os.environ[\"ZOO_REDIS_HOST\"], port=6379,
    db=0)\n    else:\n        r = redis.Redis(host='zoo-project-dru-redis-master',
    port=6379, db=0)\n    print(params)\n    r.publish(params[\"jobid\"][0],data)\nexcept
    Exception as e:\n\tprint(e)\n\n"
  start-up.sh: |
    #!/bin/bash
    # Author: GÃ©rald Fenoy
    # Copyright GeoLabs 2021
    set -x
    echo "hello"
    mkdir -p /tmp/zTmp/statusInfos
    cp /var/www/html/data/* /usr/com/zoo-project
    chown www-data:www-data -R /tmp/zTmp /usr/com/zoo-project
    chmod 777 -R /tmp/zTmp

    CMD="curl -o toto.out zoo-project-dru-rabbitmq:15672"
    $CMD
    cat toto.out
    if [ -e toto.out ]; then echo "Should start" ; else echo wait; sleep 1; $CMD ; fi

    while [ ! -e toto.out ]; do echo wait; sleep 1; $CMD ;  done


    echo "START FPM in 5 seconds"

    sleep 5

    cd /usr/lib/cgi-bin
    touch /var/log/zoofpm.log
    chown www-data:www-data /var/log/zoofpm.log
    su www-data -s /bin/bash -c "./zoo_loader_fpm ./main.cfg 2> /var/log/zoofpm.log >> /var/log/zoofpm.log"

    echo "STARTING FPM DONE"
  subscriber.py: |
    #!/usr/bin/python3
    # cf. https://github.com/joewalnes/websocketd/wiki/Simple-Python-Duplex-Example
    #
    # example usage:
    # websocketd --port=4430 --ssl --sslcert /ssl/fullchain.pem --sslkey /ssl/privkey.pem subscriber.py --devconsole
    #

    from sys import stdout, stdin
    import sys
    import threading
    import redis
    import json
    import os

    mThreads=[]
    r=None

    if "ZOO_REDIS_HOST" in os.environ:
        r = redis.Redis(host=os.environ["ZOO_REDIS_HOST"], port=6379, db=0)
    else:

        r = redis.Redis(host='zoo-project-dru-redis-master', port=6379, db=0)

    def send(t):
        # send string to web page
        stdout.write(t+'\n')
        stdout.flush()

    def listenMessages(jobID=None):
        global r
        p = r.pubsub()
        p.subscribe(jobID)
        hasSend=False
        for raw_message in p.listen():
            try:
                send(str(raw_message["data"],'utf-8'))
                hasSend=True
                try:
                    tmp=json.loads(str(raw_message["data"],'utf-8'))
                    if tmp is not None and "outputs" in tmp:
                        sys.exit()
                except Exception as e:
                    print(str(e))
                    return
            except:
                if not(hasSend):
                    send(str(raw_message["data"]))


    def receive():
        global n
        global mThreads
        while True:
            t = stdin.readline().strip()
            if not t:
                break
            t1 = t.split(" ")
            if t1[0]=="SUB":
                mThreads += [threading.Thread(target=listenMessages,kwargs={"jobID":t1[1]})]
                mThreads[len(mThreads)-1].start()
            else:
                send(t)

    t0 = threading.Thread(target=receive)
    t0.start()

    t0.join()
    #for i in range(len(mThreads)):
    #    mThreads[i].join()
kind: ConfigMap
metadata:
  name: zoo-project-dru-bin-config
  namespace: ades
---
apiVersion: v1
data:
  main.yaml: "class: Workflow\n$namespaces:\n    cwltool: http://commonwl.org/cwltool#\ndoc:
    Main stage manager\nid: main\nlabel: macro-cwl\ninputs: {}\noutputs: \n    StacCatalogUri:\n
    \       outputSource:\n          - node_stage_out/StacCatalogUri\n        type:
    string\nhints:\n    \"cwltool:Secrets\":\n        secrets: []\nrequirements:\n
    \   SubworkflowFeatureRequirement: {}\n    ScatterFeatureRequirement: {}\n    InlineJavascriptRequirement:
    {}"
  rules.yaml: |-
    rulez:
      version: 1

    parser:
      type: $graph
      driver: cwl

    onstage:
      driver: cwl

      stage_in:
        connection_node: node_stage_in
        if_scatter:
          scatterMethod: dotproduct
        input:
          template:
            overwrite: True

      on_stage:
        connection_node: on_stage

      stage_out:
        connection_node: node_stage_out
        scatter: False
        if_scatter:
          scatterMethod: dotproduct
        follow_node: node_metrics_out


    output:
      driver: cwl
      name: '-'
      type: $graph


    cwl:
      GlobalInput:
        Directory: string
        Directory[]: string[]

      OptionalInput:
        Directory: string?
        Directory[]: string[]?

      stage_in:
        Directory:
          type: string
          inputBinding:
            position: 2

        Directory[]:
          type: string[]
          inputBinding:
            position: 2

      stage_out:
        Directory:
          type: Directory

        Directory[]:
          type: Directory[]

      outputBindingResult:
        command:
          Directory:
            outputBinding:
              glob: .
            type: Directory
          Directory[]:
            outputBinding:
              glob: .
            type: Directory[]
        stepOut:
          type:
            items: Directory
            type: array
  stagein.yaml: |-
    #!/usr/bin/env cwl-runner

    cwlVersion: v1.0
    class: CommandLineTool
    id: stage
    inputs: {}
    outputs: {}
    baseCommand:
      - python
      - stage.py
    arguments:
      - $( inputs.input )
    requirements:
      DockerRequirement:
        dockerPull: ghcr.io/terradue/ogc-eo-application-package-hands-on/stage:1.3.2
      EnvVarRequirement:
        envDef:
          A: "2"
      InlineJavascriptRequirement: {}
      InitialWorkDirRequirement:
        listing:
          - entryname: stage.py
            entry: "import pystac\nimport stac_asset\nimport asyncio\nimport os\nimport sys\n\nconfig = stac_asset.Config(warn=True)\n\nasync def main(href: str):\n    \n    item = pystac.read_file(href)\n    \n    os.makedirs(item.id, exist_ok=True)\n    cwd = os.getcwd()\n    \n    os.chdir(item.id)\n    item = await stac_asset.download_item(item=item, directory=\".\", config=config)\n    os.chdir(cwd)\n    \n    cat = pystac.Catalog(\n        id=\"catalog\",\n        description=f\"catalog with staged {item.id}\",\n        title=f\"catalog with staged {item.id}\",\n    )\n    cat.add_item(item)\n    \n    cat.normalize_hrefs(\"./\")\n    cat.save(catalog_type=pystac.CatalogType.SELF_CONTAINED)\n\n    return cat\n\nhref = sys.argv[1]\n\ncat = asyncio.run(main(href))"
  stageout.yaml: "cwlVersion: v1.0\nclass: CommandLineTool\nid: stage-out\ndoc: \"Stage-out
    the results to S3\"\ninputs:\n  process:\n    type: string\n  collection_id:\n
    \   type: string\n  STAGEOUT_OUTPUT:\n    type: string\n  STAGEOUT_AWS_ACCESS_KEY_ID:\n
    \   type: string\n  STAGEOUT_AWS_SECRET_ACCESS_KEY:\n    type: string\n  STAGEOUT_AWS_REGION:\n
    \   type: string\n  STAGEOUT_AWS_SERVICEURL:\n    type: string\noutputs:\n  StacCatalogUri:\n
    \   outputBinding:\n      outputEval: ${  return \"s3://\" + inputs.STAGEOUT_OUTPUT
    + \"/\" + inputs.process + \"/catalog.json\"; }\n    type: string\nbaseCommand:\n
    \ - python\n  - stageout.py\narguments:\n  - $( inputs.wf_outputs.path )\n  -
    $( inputs.STAGEOUT_OUTPUT )\n  - $( inputs.process )\n  - $( inputs.collection_id
    )\nrequirements:\n  DockerRequirement:\n    dockerPull: ghcr.io/terradue/ogc-eo-application-package-hands-on/stage:1.3.2\n
    \ InlineJavascriptRequirement: {}\n  EnvVarRequirement:\n    envDef:\n      AWS_ACCESS_KEY_ID:
    $( inputs.STAGEOUT_AWS_ACCESS_KEY_ID )\n      AWS_SECRET_ACCESS_KEY: $( inputs.STAGEOUT_AWS_SECRET_ACCESS_KEY
    )\n      AWS_REGION: $( inputs.STAGEOUT_AWS_REGION )\n      AWS_S3_ENDPOINT: $(
    inputs.STAGEOUT_AWS_SERVICEURL )\n  InitialWorkDirRequirement:\n    listing:\n
    \     - entryname: stageout.py\n        entry: |-\n          import os\n          import
    sys\n          import pystac\n          import botocore\n          import boto3\n
    \         import shutil\n          from pystac.stac_io import DefaultStacIO, StacIO\n
    \         from urllib.parse import urlparse\n          from datetime import datetime\n
    \         \n          cat_url = sys.argv[1]\n          bucket = sys.argv[2]\n
    \         subfolder = sys.argv[3]\n          collection_id = sys.argv[4]\n          print(f\"cat_url:
    {cat_url}\", file=sys.stderr)\n          print(f\"bucket: {bucket}\", file=sys.stderr)\n
    \         print(f\"subfolder: {subfolder}\", file=sys.stderr)\n          print(f\"collection_id:
    {collection_id}\", file=sys.stderr)\n          \n          aws_access_key_id =
    os.environ[\"AWS_ACCESS_KEY_ID\"]\n          aws_secret_access_key = os.environ[\"AWS_SECRET_ACCESS_KEY\"]\n
    \         region_name = os.environ[\"AWS_REGION\"]\n          endpoint_url = os.environ[\"AWS_S3_ENDPOINT\"]\n
    \         print(f\"aws_access_key_id: {aws_access_key_id}\", file=sys.stderr)\n
    \         print(f\"aws_secret_access_key: {aws_secret_access_key}\", file=sys.stderr)\n
    \         print(f\"region_name: {region_name}\", file=sys.stderr)\n          print(f\"endpoint_url:
    {endpoint_url}\", file=sys.stderr)\n          \n          shutil.copytree(cat_url,
    \"/tmp/catalog\")\n          cat = pystac.read_file(os.path.join(\"/tmp/catalog\",
    \"catalog.json\"))\n          \n          class CustomStacIO(DefaultStacIO):\n
    \             \"\"\"Custom STAC IO class that uses boto3 to read from S3.\"\"\"\n
    \         \n              def __init__(self):\n                  self.session
    = botocore.session.Session()\n                  self.s3_client = self.session.create_client(\n
    \                     service_name=\"s3\",\n                      use_ssl=True,\n
    \                     aws_access_key_id=aws_access_key_id,\n                      aws_secret_access_key=aws_secret_access_key,\n
    \                     endpoint_url=endpoint_url,\n                      region_name=region_name,\n
    \                 )\n          \n              def write_text(self, dest, txt,
    *args, **kwargs):\n                  parsed = urlparse(dest)\n                  if
    parsed.scheme == \"s3\":\n                      self.s3_client.put_object(\n                          Body=txt.encode(\"UTF-8\"),\n
    \                         Bucket=parsed.netloc,\n                          Key=parsed.path[1:],\n
    \                         ContentType=\"application/geo+json\",\n                      )\n
    \                 else:\n                      super().write_text(dest, txt, *args,
    **kwargs)\n          \n          \n          client = boto3.client(\n              \"s3\",\n
    \             aws_access_key_id=aws_access_key_id,\n              aws_secret_access_key=aws_secret_access_key,\n
    \             endpoint_url=endpoint_url,\n              region_name=region_name,\n
    \         )\n          \n          StacIO.set_default(CustomStacIO)\n          \n
    \         # create a STAC collection for the process\n          date = datetime.now().strftime(\"%Y-%m-%d\")\n
    \         \n          dates = [datetime.strptime(\n              f\"{date}T00:00:00\",
    \"%Y-%m-%dT%H:%M:%S\"\n          ), datetime.strptime(f\"{date}T23:59:59\", \"%Y-%m-%dT%H:%M:%S\")]\n
    \         \n          collection = pystac.Collection(\n            id=collection_id,\n
    \           description=\"description\",\n            extent=pystac.Extent(\n
    \             spatial=pystac.SpatialExtent([[-180, -90, 180, 90]]), \n              temporal=pystac.TemporalExtent(intervals=[[min(dates),
    max(dates)]])\n            ),\n            title=\"Processing results\",\n            href=f\"s3://{bucket}/{subfolder}/collection.json\",\n
    \           stac_extensions=[],\n            keywords=[\"eoepca\"],\n            license=\"proprietary\",\n
    \         )\n          \n          for index, link in enumerate(cat.links):\n
    \           if link.rel == \"root\":\n                cat.links.pop(index) # remove
    root link\n          \n          for item in cat.get_items():\n          \n              item.set_collection(collection)\n
    \             \n              collection.add_item(item)\n              \n              for
    key, asset in item.get_assets().items():\n                  s3_path = os.path.normpath(\n
    \                     os.path.join(subfolder, collection_id, item.id, os.path.basename(asset.href))\n
    \                 )\n                  print(f\"upload {asset.href} to s3://{bucket}/{s3_path}\",file=sys.stderr)\n
    \                 client.upload_file(\n                      asset.get_absolute_href(),\n
    \                     bucket,\n                      s3_path,\n                  )\n
    \                 asset.href = f\"s3://{bucket}/{s3_path}\"\n                  item.add_asset(key,
    asset)\n          \n          collection.update_extent_from_items() \n          \n
    \         cat.clear_items()\n          \n          cat.add_child(collection)\n
    \         \n          cat.normalize_hrefs(f\"s3://{bucket}/{subfolder}\")\n          \n
    \         for item in collection.get_items():\n              # upload item to
    S3\n              print(f\"upload {item.id} to s3://{bucket}/{subfolder}\", file=sys.stderr)\n
    \             pystac.write_file(item, item.get_self_href())\n          \n          #
    upload collection to S3\n          print(f\"upload collection.json to s3://{bucket}/{subfolder}\",
    file=sys.stderr)\n          pystac.write_file(collection, collection.get_self_href())\n
    \         \n          # upload catalog to S3\n          print(f\"upload catalog.json
    to s3://{bucket}/{subfolder}\", file=sys.stderr)\n          pystac.write_file(cat,
    cat.get_self_href())\n          \n          print(f\"s3://{bucket}/{subfolder}/catalog.json\",
    file=sys.stdout)"
kind: ConfigMap
metadata:
  name: zoo-project-dru-cwlwrapper-config
  namespace: ades
---
apiVersion: v1
data:
  deploy.md: |
    ## Deploy the water_bodies Application Package

    This endpoint permits the deployment of the *water_bodies* application package.

    This time, we can add a request body and set its content type. There are two encodings presented which rely on the same CWL conformance class. They both use the same `water_bodies.cwl`, but using the OGC Application Package encoding (`application/ogcapppkg+json`), we can pass the CWL file by reference rather than the file content, when we pick the CWL encoding (`application/cwl+yaml`).

    When we select a content type, the request body text area should get updated and contain a relevant payload for this encoding.

    <div class="markdown-alert markdown-alert-warning" data-sourcepos="9:1-10:18" dir="auto"><p data-sourcepos="9:2-10:18" dir="auto"><span class="color-fg-attention text-semibold d-inline-flex flex-items-center mb-1"><svg class="octicon octicon-alert mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path></svg>Warning</span><br>
    This is a warning</p></div>

    >[!WARNING]
    >If we edit the payload, the text area may not update when selecting a different encoding. In such a case, we can use the `Reset` button to get it corrected.

    After executing the deployment request, the server sends back a process summary similar to the one we received from the previous endpoint. The server response includes a `Location` header that contains the URL for accessing the detailed process description.

    We have two options: go back to the first step and list the available processes (it should contain the deployed process), or move on to the next step and review the process description.
  execute.md: |
    ## Execute the water-bodies process

    Using this endpoint, we can execute the *water-bodies* process. It
    will lead to the creation of a job. It is the entity that identifies
    your process execution.

    After we send the request to the server, it should create a unique identifier for the job called `jobID`. The server should then return a status code of 201 along with a `Location` header that contains the URL to the job status. The information received in the response body should match the process summary that we previously obtained by using the process list endpoint.

    With the help of the unique job identifier `{jobID}`, we can take control of the execution process. To keep track of its progress, we can use the endpoint `/jobs/{jobID}`. Once the execution process is complete, we can retrieve the outcome by accessing `/jobs/{jobId}/results`. If needed, we can terminate the job run at any point by using the endpoint `/jobs/{jobId}`.

    We will use the STAC item below to execute the *water-bodies*
    process.

    <table>
    <thead>
    <tr>
    <th>Acquisitions</th>
    <th></th>
    <th></th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td>Date</td>
    <td>2021-07-13</td>
    <td>2022-05-24</td>
    </tr>
    <tr>
    <td>URL</td>
    <td><a href="https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_10TFK_20210713_0_L2A">S2B_10TFK_20210713_0_L2A</a></td>
    <td><a href="https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2A_10TFK_20220524_0_L2A">S2A_10TFK_20220524_0_L2A</a></td>
    </tr>
    <tr>
    <td>Quicklook</td>
      <td><img src="https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/10/T/FK/2021/7/13/0/preview.jpg" width="300px" /></td>
      <td><img src="https://roda.sentinel-hub.com/sentinel-s2-l1c/tiles/10/T/FK/2022/5/24/0/preview.jpg" width="300px" /></td>
    </tr>
    </tbody>
    </table>

    As mentioned earlier, to proceed with the following steps, you need to copy and paste the `jobID` that you received. You can find this `jobID` in both the `Location` header and the `id` parameter of the status information object contained in the response body. Once you have the `jobID`, you can check the job status and access the final result.

    Here is a screenshot demonstrating where to locate the `jobID` within the server response.

    <center><img src="https://raw.githubusercontent.com/ZOO-Project/charts/main/img/copy-jobId.png" />*Illustrating where to find the jobID*</center>

    After receiving the response, we can proceed to the following endpoint to check the job status.

    For more information, see <a rel="noopener noreferrer" target="_blank" href="https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_create_job">Section 7.11</a>.
  header-secured.md: "<img\nsrc=\"https://avatars.githubusercontent.com/u/44975239?s=200&amp;v=4\"\nwidth=\"100\"
    height=\"100\" alt=\"@EOEPCA\" style=\"float:\nleft;margin-right: 25px;margin-left:
    25px;\">\n\n## Introduction\n\nThis OpenAPI showcases the **EOEPCA Application
    Deployment and Execution Service** (**ADES**) building block. Based initially
    on the <a href=\"http://zoo-project.org\">ZOO-Project</a>, the **ADES** is now
    an integral part of it, operating under the code name **ZOO-Project-DRU**. The
    official package corresponding to the current server instance is available from
    [here](https://artifacthub.io/packages/helm/zoo-project/zoo-project-dru). \n\nThe
    ZOO-Project is an open-source processing platform created in 2008 and announced
    in 2009 at the FOSS4G conference in Sydney, Australia. Released under MIT/X11
    license, it provides a generic processing platform to facilitate communication
    between your existing software and libraries. This platform uses communication
    standards defined by the Open Geospatial Consortium (OGC) to ensure that processing
    is Findable, Accessible, Interoperable, and Reproducible (FAIR).\n\nThe first
    version implemented and still supported in the ZOO-Project is the OGC <a href=\"https://www.ogc.org/standard/wps/\">Web
    Processing Service (WPS)</a> 1.0.0 standard published in 2007. As time passed
    and technologies evolved, the OGC adopted other processing-oriented standards
    (such as WPS 2.0.0), and now there is the <a href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html\">OGC
    API - Processes - Part 1: Core standard</a>. This standard is the version illustrated
    here. \n\nFor more information about the ZOO-Project, look at last year's [FOSS4G
    conference slides](https://zoo-project.github.io/slides/FOSS4G-2022/#/).\n\n##
    OGC API - Processes\n\nUsing any OGC API, a client application should be able
    to list, from the `/conformance` endpoint, the conformance classes supported by
    the server instance it is interacting with. \n\nThe conformance classes, defined
    in the <a href=\"https://docs.ogc.org/is/19-072/19-072.html\">OGC API - Common
    - Part 1: Core</a>, and shared amongst OGC APIs are the following:\n* <a href=\"https://docs.ogc.org/is/19-072/19-072.html#_8749f7f5-747a-4760-b566-4c06916622f4\">core</a>\n*
    <a href=\"https://docs.ogc.org/is/19-072/19-072.html#_50ec22a6-6d42-449a-b16e-b3f8b2f0c568\">landing-page</a>\n*
    <a href=\"https://docs.ogc.org/is/19-072/19-072.html#_ab6e3c2d-d2dc-4f01-a7d4-8b52133289a0\">oas30</a>\n*
    <a href=\"https://docs.ogc.org/is/19-072/19-072.html#_cc409eaa-913f-4fce-be16-7b4659a1bddc\">html</a>\n*
    <a href=\"https://docs.ogc.org/is/19-072/19-072.html#_4426a778-fd8b-4f21-8cf1-370658aac1a7\">json</a>\n\nThe
    OGC API - Common - Part 1: Core standard can expose an OpenAPI on a given endpoint
    (it can be any path depending on the server implementation; it is `/api` here
    and corresponds to the link with `\"rel\": \"service-desc\"` from the landing
    page) if the server instance supports the corresponding conformance class (oas30)
    defined in both the OGC API - Common - Part 1: Core and OGC API - Processes -
    Part 1: Core standards. It is the source for producing through <a href=\"https://swagger.io/tools/swagger-ui/\">Swagger-UI</a>
    the user interface we will interact with for this step-by-step exercise.\n\nThe
    OGC API - Processes - Part 1: Core standard includes the following conformance
    classes:\n* <a href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html#toc61\">core</a>\n*
    <a href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html#toc62\">ogc-process-description</a>\n*
    <a href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html#toc66\">job-list</a>\n*
    <a href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html#toc67\">callback</a>\n*
    <a href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html#toc68\">dismiss</a>\n\nThe
    OGC API - Processes - Part 1: Core standard defines how a server implementation
    provides access to executable processes through a Web API and the capability to
    invoke them from a client application. The server implementation should provide
    an endpoint to access the processes list, get a detailed description (ogc-process-description),
    execute a process by providing inputs and outputs, follow execution status (job-list),
    inform another service about the current status of a job (callback), cancel a
    job run or remove its results (dismiss).\n\nIf the OGC API - Processes - Part
    1: Core defines a standard way to list processes, execute them, and get control
    of their execution, it does not define how to deploy, replace, or undeploy processes.
    For this transactional purpose, we will rely on the <a href=\"https://docs.ogc.org/DRAFTS/20-044.html\">OGC
    API - Processes - Part 2: Deploy, Replace, Undeploy draft specification</a>, which
    the ZOO-Project-DRU supports. It defines three additional conformance classes
    to the initial OGC API - Processes - Part 1: Core standard and determines how
    a client application can interact with a server instance to deploy, replace, or
    undeploy a process from the processes available from the server instance. The
    first conformance class (deploy-replace-undeploy) defines the three operations,
    and the two other conformance classes (ogcapppkg and cwl) are related to the encoding
    that the server instance supports for the operations.\n\nWe will use the Swagger-UI
    to interact with the API with the help of examples associated with essential steps.
    Each endpoint should have a description and self-explanatory purpose.\n\nWe aim
    to explore the API by beginning from the landing page and displaying the conformances
    that the server instance supports. After that, we will introduce an endpoint that
    allows us to list, deploy, and obtain detailed information about a process. Lastly,
    we will execute the previously deployed process, monitor its progress, and access
    the result.\n\nAuthentication is necessary to access specific endpoints. Please
    refer to the next section and follow instructions when required.\n\n## Authentication\n\nTo
    use parts of this API, authentication with an OpenID Connect Provider is required.
    For this demonstration, we will use a Keycloak instance. Endpoints that require
    authentication are marked with an open lock icon on the right.\n\nTo authenticate,
    please press the button\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0
    0 20 20\" class=\"unlocked\" width=\"20\" height=\"20\" aria-hidden=\"true\" focusable=\"false\"><path
    d=\"M15.8 8H14V5.6C14 2.703 12.665 1 10 1 7.334 1 6 2.703 6 5.6V6h2v-.801C8 3.754
    8.797 3 10 3c1.203 0 2 .754 2 2.199V8H4c-.553 0-1 .646-1 1.199V17c0 .549.428 1.139.951
    1.307l1.197.387C5.672 18.861 6.55 19 7.1 19h5.8c.549 0 1.428-.139 1.951-.307l1.196-.387c.524-.167.953-.757.953-1.306V9.199C17
    8.646 16.352 8 15.8 8z\"></path></svg>\n, then a window appears, as shown below.
    \n\n<center><img src=\"https://raw.githubusercontent.com/ZOO-Project/charts/main/img/authorizations.png\"
    width=\"50%\" /><br>*Window to set client_id and authenticate*</center>\n\nFrom
    there, use the following **client_id**:\n`ZOO-Secured-Client` in the section **OpenIDAuth\n(OAuth2,implicit)**
    from the available authorizations. The login interface shown below allows us to
    authenticate.\n\n<center><img src=\"https://raw.githubusercontent.com/ZOO-Project/charts/main/img/keycloack_login.png\"
    width=\"50%\" /><br>*Window to set client_id and authenticate*</center>\n\nWe
    can authenticate by entering the login `demo` and the password `demo-password-202X`,
    then clicking \"Sign in\". After that, we will be redirected to Swagger-UI, where
    we can close the window. Earlier, you pressed the lock button. Now, the button
    should look closed <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20
    20\" class=\"locked\" width=\"20\" height=\"20\" aria-hidden=\"true\" focusable=\"false\"><path
    d=\"M15.8 8H14V5.6C14 2.703 12.665 1 10 1 7.334 1 6 2.703 6 5.6V8H4c-.553 0-1
    .646-1 1.199V17c0 .549.428 1.139.951 1.307l1.197.387C5.672 18.861 6.55 19 7.1
    19h5.8c.549 0 1.428-.139 1.951-.307l1.196-.387c.524-.167.953-.757.953-1.306V9.199C17
    8.646 16.352 8 15.8 8zM12 8H8V5.199C8 3.754 8.797 3 10 3c1.203 0 2 .754 2 2.199V8z\"></path></svg>.\n\nOnce
    authenticated, we can use the endpoint or any other secured endpoint. In other
    cases, we should get an exception response with a 401 status code.\n"
  header.md: "<img\nsrc=\"https://avatars.githubusercontent.com/u/44975239?s=200&amp;v=4\"\nwidth=\"100\"
    height=\"100\" alt=\"@EOEPCA\" style=\"float:\nleft;margin-right: 25px;margin-left:
    25px;\">\n\n## Introduction\n\nThis OpenAPI showcases the **EOEPCA Application
    Deployment and Execution Service** (**ADES**) building block. Based initially
    on the <a href=\"http://zoo-project.org\">ZOO-Project</a>, the **ADES** is now
    an integral part of it, operating under the code name **ZOO-Project-DRU**. The
    official package corresponding to the current server instance is available from
    [here](https://artifacthub.io/packages/helm/zoo-project/zoo-project-dru). \n\nThe
    ZOO-Project is an open-source processing platform created in 2008 and announced
    in 2009 at the FOSS4G conference in Sydney, Australia. Released under MIT/X11
    license, it provides a generic processing platform to facilitate communication
    between your existing software and libraries. This platform uses communication
    standards defined by the Open Geospatial Consortium (OGC) to ensure that processing
    is Findable, Accessible, Interoperable, and Reproducible (FAIR).\n\nThe first
    version implemented and still supported in the ZOO-Project is the OGC <a href=\"https://www.ogc.org/standard/wps/\">Web
    Processing Service (WPS)</a> 1.0.0 standard published in 2007. As time passed
    and technologies evolved, the OGC adopted other processing-oriented standards
    (such as WPS 2.0.0), and now there is the <a href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html\">OGC
    API - Processes - Part 1: Core standard</a>. This standard is the version illustrated
    here. \n\nFor more information about the ZOO-Project, look at last year's [FOSS4G
    conference slides](https://zoo-project.github.io/slides/FOSS4G-2022/#/).\n\n##
    OGC API - Processes\n\nUsing any OGC API, a client application should be able
    to list, from the `/conformance` endpoint, the conformance classes supported by
    the server instance it is interacting with. \n\nThe conformance classes, defined
    in the <a href=\"https://docs.ogc.org/is/19-072/19-072.html\">OGC API - Common
    - Part 1: Core</a>, and shared amongst OGC APIs are the following:\n* <a href=\"https://docs.ogc.org/is/19-072/19-072.html#_8749f7f5-747a-4760-b566-4c06916622f4\">core</a>\n*
    <a href=\"https://docs.ogc.org/is/19-072/19-072.html#_50ec22a6-6d42-449a-b16e-b3f8b2f0c568\">landing-page</a>\n*
    <a href=\"https://docs.ogc.org/is/19-072/19-072.html#_ab6e3c2d-d2dc-4f01-a7d4-8b52133289a0\">oas30</a>\n*
    <a href=\"https://docs.ogc.org/is/19-072/19-072.html#_cc409eaa-913f-4fce-be16-7b4659a1bddc\">html</a>\n*
    <a href=\"https://docs.ogc.org/is/19-072/19-072.html#_4426a778-fd8b-4f21-8cf1-370658aac1a7\">json</a>\n\nThe
    OGC API - Common - Part 1: Core standard can expose an OpenAPI on a given endpoint
    (it can be any path depending on the server implementation; it is `/api` here
    and corresponds to the link with `\"rel\": \"service-desc\"` from the landing
    page) if the server instance supports the corresponding conformance class (oas30)
    defined in both the OGC API - Common - Part 1: Core and OGC API - Processes -
    Part 1: Core standards. It is the source for producing through <a href=\"https://swagger.io/tools/swagger-ui/\">Swagger-UI</a>
    the user interface we will interact with for this step-by-step exercise.\n\nThe
    OGC API - Processes - Part 1: Core standard includes the following conformance
    classes:\n* <a href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html#toc61\">core</a>\n*
    <a href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html#toc62\">ogc-process-description</a>\n*
    <a href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html#toc66\">job-list</a>\n*
    <a href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html#toc67\">callback</a>\n*
    <a href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html#toc68\">dismiss</a>\n\nThe
    OGC API - Processes - Part 1: Core standard defines how a server implementation
    provides access to executable processes through a Web API and the capability to
    invoke them from a client application. The server implementation should provide
    an endpoint to access the processes list, get a detailed description (ogc-process-description),
    execute a process by providing inputs and outputs, follow execution status (job-list),
    inform another service about the current status of a job (callback), cancel a
    job run or remove its results (dismiss).\n\nIf the OGC API - Processes - Part
    1: Core defines a standard way to list processes, execute them, and get control
    of their execution, it does not define how to deploy, replace, or undeploy processes.
    For this transactional purpose, we will rely on the <a href=\"https://docs.ogc.org/DRAFTS/20-044.html\">OGC
    API - Processes - Part 2: Deploy, Replace, Undeploy draft specification</a>, which
    the ZOO-Project-DRU supports. It defines three additional conformance classes
    to the initial OGC API - Processes - Part 1: Core standard and determines how
    a client application can interact with a server instance to deploy, replace, or
    undeploy a process from the processes available from the server instance. The
    first conformance class (deploy-replace-undeploy) defines the three operations,
    and the two other conformance classes (ogcapppkg and cwl) are related to the encoding
    that the server instance supports for the operations.\n\nWe will use the Swagger-UI
    to interact with the API with the help of examples associated with essential steps.
    Each endpoint should have a description and self-explanatory purpose.\n\nWe aim
    to explore the API by beginning from the landing page and displaying the conformances
    that the server instance supports. After that, we will introduce an endpoint that
    allows us to list, deploy, and obtain detailed information about a process. Lastly,
    we will execute the previously deployed process, monitor its progress, and access
    the result.\n\n"
  job-results.md: |-
    ## Accessing results

    After a successful job execution, we can use this endpoint to retrieve the process execution results.

    Following the <a href="https://docs.ogc.org/bp/20-089r1.html">OGC Best Practice for Earth Observation Application Package</a>, the result should be a stac catalog.

    If everything runs correctly, you will receive a JSON object containing a `StacCatalogUri` that points to the s3 bucket where your catalog is stored.
  job-status.md: "## Job Status\n\nThis endpoint provides access to information about
    jobs. As defined in the schema, information should contain at least a `type` (`process`),
    a `jobId`, and a `status`. This last, can take the following values: `accepted`,
    `running`, `successful`, `failed`, `dismissed`.\n\nWe can monitor job progress
    using the `progress` field, current step using `message`, and check service runtime
    using `created`, `started`, `updated`, and potentially `finished`.\n \nOptionally,
    the JSON object can contain links. Upon running the process, the server returns
    the current status as a single link. At the end of execution, another link should
    be available and include a URL to the results, identified by the relation 'http://www.opengis.net/def/rel/ogc/1.0/results'.\n\nIn
    the ZOO-Project-DRU implementation, we added links to the log files of every step
    of the CWL workflow execution.\n\nTo proceed, we must take the `jobID` returned
    in the previous step and paste it into the designated field. Once done, we should
    click the \"Execute\" button.\n"
  processes-description.md: "### Details about the *water-bodies* process\n\nThe process
    description contains information about inputs and outputs and a link to the execution
    endpoint for the process. The Core does not mandate the use of a specific process
    description to specify the interface of a process. That said, the Core requirements
    class makes the following recommendation:\n\nImplementations SHOULD consider supporting
    the OGC process description.\n\nFor more information, see <a rel=\"noopener noreferrer\"
    target=\"_blank\" href=\"https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_process_description\">Section
    7.10</a>.\n\nHere, we use a fixed `{processId}` parameter, but we can still use
    <a href=\"#operations-Other_endpoints-Other_endpointsget_process__processID__\">the
    generic link</a> at the bottom of this form to access a detailed description of
    other processes. \n\nAs seen earlier, the conformance class ogc-process-description
    is supported, meaning the server will provide a standard process description that
    contains the list and detailed description of every input and output. \n\nThe
    input for a process can be either single-valued or multi-valued, meaning you can
    pass one or more values for a given input. Every input has `minOccurs` and `maxOccurs`
    attributes. If there are no `minOccurs` attributes, it means that the value is
    1,  and that the input is required to execute the process. Some inputs may be
    optional, indicated by a `minOccurs` of 0. If there are no `maxOccurs`, the default
    value 1 applies, and the input can take only one value. If `maxOccurs` is greater
    than 1, the input can be an array of multiple items.\n\nFor the *water-bodies*
    process we review, we have the single-valued inputs `aoi` and `epsg`, while `bands`
    and `stac_items` are multi-valued. It has a single `stac` output containing the
    stac catalog of the processing results.\n"
  processes-list.md: |
    ## List available processes

    The list of processes contains a summary of each process the OGC API - Processes offers, including the link to a more detailed description of the process.

    For more information, see <a rel="noopener noreferrer" target="_blank" href="https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_process_list">Section 7.9</a>.

    The first time we use this endpoint, the list contains only the default processes.

    One may note that the `mutable` property in the process summary is `false` for these processes. It means that the end-user cannot modify them in any way. They can only use them through OGC API - Processes - Part 1: Core standard.

    Additionally, there are two other properties: `jobControlOptions` and `outputTransmission`. The `jobControlOptions` property defines the restrictions for executing a process, while the `outputTransmission` property determines the method for requesting the result returned from the process. By examining the `jobControlOptions` value, we can determine that the possible execution modes are synchronous (`sync-execute`), asynchronous (`async-execute`), and dismissed (`dismiss`). The options available in the array may vary depending on the process. In the next step, we will learn that for mutable processes, the possible values are limited to `async-execute` and `dismiss`, indicating that these processes cannot be executed synchronously.

    As we will see later, this list will change once you have deployed a new process. Follow the next step, and once complete, come back here to get the updated list.
kind: ConfigMap
metadata:
  name: zoo-project-dru-openapi-config
  namespace: ades
---
apiVersion: v1
data: {}
kind: ConfigMap
metadata:
  name: zoo-project-dru-startup-configmap
  namespace: ades
---
apiVersion: v1
data:
  cookiecutter_config.yaml: |
    replay_dir: "/tmp/zTmp/cookiecutter-templates/"
    cookiecutters_dir: "/tmp/zTmp/cookiecutter-templates/"
kind: ConfigMap
metadata:
  name: zoo-project-dru-zoo-deploy-service-config
  namespace: ades
---
apiVersion: v1
data:
  app-package.cwl: |
    cwlVersion: v1.0
    $namespaces:
      s: https://schema.org/
    s:softwareVersion: 1.4.1
    schemas:
      - http://schema.org/version/9.0/schemaorg-current-http.rdf
    $graph:
      - class: Workflow
        id: water-bodies
        label: Water bodies detection based on NDWI and otsu threshold
        doc: Water bodies detection based on NDWI and otsu threshold
        requirements:
          - class: ScatterFeatureRequirement
          - class: SubworkflowFeatureRequirement
        inputs:
          aoi:
            label: area of interest
            doc: area of interest as a bounding box
            type: string
          epsg:
            label: EPSG code
            doc: EPSG code
            type: string
            default: "EPSG:4326"
          stac_items:
            label: Sentinel-2 STAC items
            doc: list of Sentinel-2 COG STAC items
            type: string[]
          bands:
            label: bands used for the NDWI
            doc: bands used for the NDWI
            type: string[]
            default: ["green", "nir"]
        outputs:
          - id: stac
            outputSource:
              - node_stac/stac_catalog
            type: Directory
        steps:
          node_water_bodies:
            run: "#detect_water_body"
            in:
              item: stac_items
              aoi: aoi
              epsg: epsg
              bands: bands
            out:
              - detected_water_body
            scatter: item
            scatterMethod: dotproduct
          node_stac:
            run: "#stac"
            in:
              item: stac_items
              rasters:
                source: node_water_bodies/detected_water_body
            out:
              - stac_catalog
      - class: Workflow
        id: detect_water_body
        label: Water body detection based on NDWI and otsu threshold
        doc: Water body detection based on NDWI and otsu threshold
        requirements:
          - class: ScatterFeatureRequirement
        inputs:
          aoi:
            doc: area of interest as a bounding box
            type: string
          epsg:
            doc: EPSG code
            type: string
            default: "EPSG:4326"
          bands:
            doc: bands used for the NDWI
            type: string[]
          item:
            doc: STAC item
            type: string
        outputs:
          - id: detected_water_body
            outputSource:
              - node_otsu/binary_mask_item
            type: File
        steps:
          node_crop:
            run: "#crop"
            in:
              item: item
              aoi: aoi
              epsg: epsg
              band: bands
            out:
              - cropped
            scatter: band
            scatterMethod: dotproduct
          node_normalized_difference:
            run: "#norm_diff"
            in:
              rasters:
                source: node_crop/cropped
            out:
              - ndwi
          node_otsu:
            run: "#otsu"
            in:
              raster:
                source: node_normalized_difference/ndwi
            out:
              - binary_mask_item
      - class: CommandLineTool
        id: crop
        requirements:
          InlineJavascriptRequirement: {}
          EnvVarRequirement:
            envDef:
              PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
              PYTHONPATH: /app
          ResourceRequirement:
            coresMax: 1
            ramMax: 512
        hints:
          DockerRequirement:
            dockerPull: ghcr.io/terradue/ogc-eo-application-package-hands-on/crop:1.5.0
        baseCommand: ["python", "-m", "app"]
        arguments: []
        inputs:
          item:
            type: string
            inputBinding:
              prefix: --input-item
          aoi:
            type: string
            inputBinding:
              prefix: --aoi
          epsg:
            type: string
            inputBinding:
              prefix: --epsg
          band:
            type: string
            inputBinding:
              prefix: --band
        outputs:
          cropped:
            outputBinding:
              glob: '*.tif'
            type: File
      - class: CommandLineTool
        id: norm_diff
        requirements:
          InlineJavascriptRequirement: {}
          EnvVarRequirement:
            envDef:
              PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
              PYTHONPATH: /app
          ResourceRequirement:
            coresMax: 1
            ramMax: 512
        hints:
          DockerRequirement:
            dockerPull: ghcr.io/terradue/ogc-eo-application-package-hands-on/norm_diff:1.5.0
        baseCommand: ["python", "-m", "app"]
        arguments: []
        inputs:
          rasters:
            type: File[]
            inputBinding:
              position: 1
        outputs:
          ndwi:
            outputBinding:
              glob: '*.tif'
            type: File
      - class: CommandLineTool
        id: otsu
        requirements:
          InlineJavascriptRequirement: {}
          EnvVarRequirement:
            envDef:
              PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
              PYTHONPATH: /app
          ResourceRequirement:
            coresMax: 1
            ramMax: 512
        hints:
          DockerRequirement:
            dockerPull: ghcr.io/terradue/ogc-eo-application-package-hands-on/otsu:1.5.0
        baseCommand: ["python", "-m", "app"]
        arguments: []
        inputs:
          raster:
            type: File
            inputBinding:
              position: 1
        outputs:
          binary_mask_item:
            outputBinding:
              glob: '*.tif'
            type: File
      - class: CommandLineTool
        id: stac
        requirements:
          InlineJavascriptRequirement: {}
          EnvVarRequirement:
            envDef:
              PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
              PYTHONPATH: /app
          ResourceRequirement:
            coresMax: 1
            ramMax: 512
        hints:
          DockerRequirement:
            dockerPull: ghcr.io/terradue/ogc-eo-application-package-hands-on/stac:1.5.0
        baseCommand: ["python", "-m", "app"]
        arguments: []
        inputs:
          item:
            type:
              type: array
              items: string
              inputBinding:
                prefix: --input-item
          rasters:
            type:
              type: array
              items: File
              inputBinding:
                prefix: --water-body
        outputs:
          stac_catalog:
            outputBinding:
              glob: .
            type: Directory
  app-package.json: |
    {
      "executionUnit": {
        "href": "https://github.com/Terradue/ogc-eo-application-package-hands-on/releases/download/1.5.0/app-water-bodies-cloud-native.1.5.0.cwl",
        "type": "application/cwl"
      }
    }
  job-order.json: |
    {
      "inputs": {
        "stac_items": ["https://planetarycomputer.microsoft.com/api/stac/v1/collections/landsat-c2-l2/items/LC09_L2SP_042033_20231015_02_T1"],
        "aoi": "-118.985,38.432,-118.183,38.938",
        "epsg": "EPSG:4326",
        "bands": ["green","nir08"]
      }
    }
  job-order1.json: |
    {
      "inputs": {
        "stac_items": [
          "https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_10TFK_20210713_0_L2A",
          "https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2A_10TFK_20220524_0_L2A"
        ],
        "aoi": "-121.399,39.834,-120.74,40.472",
        "epsg": "EPSG:4326",
        "bands": [
          "green",
          "nir"
        ]
      }
    }
kind: ConfigMap
metadata:
  name: zoo-project-dru-zoo-example-config
  namespace: ades
---
apiVersion: v1
data:
  htaccess: |-
    RewriteEngine On
    SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
    SetEnvIf Request_URI "^\/?(\w+)\/ogc-api(.*)" SERVICES_NAMESPACE=$1
    RewriteRule ^\/?(\w+)\/ogc-api/(.*) /ogc-api/$2 [PT]
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule ^ogc-api/api.html$ /cgi-bin/zoo_loader.cgi?/api.html [L,QSA]
    RewriteRule ^ogc-api/index.html$ /cgi-bin/zoo_loader.cgi?service=WPS&service=WPS&request=Execute&version=1.0.0&Identifier=display&RawDataOutput=Result&DataInputs=tmpl=@xlink:href=https://ades.test.eodhp.eco-ke-staging.com/ogc-api/ [L,QSA]
    RewriteRule ^ogc-api(.*).html$ /cgi-bin/zoo_loader.cgi?service=WPS&service=WPS&request=Execute&version=1.0.0&Identifier=display&RawDataOutput=Result&DataInputs=tmpl=@xlink:href=https://ades.test.eodhp.eco-ke-staging.com/ogc-api$1 [L,QSA]
    RewriteRule ^ogc-api(.*)$ /cgi-bin/zoo_loader.cgi?$1 [L,QSA]
  main.cfg: |-
    [main]
    encoding = utf-8
    version = 1.0.0
    serverAddress = http://127.0.0.1
    language = en-US
    lang = fr-FR,en-CA,en-US
    tmpPath=/tmp/zTmp
    tmpUrl = https://ades.test.eodhp.eco-ke-staging.com/temp/
    mapserverAddress = https://ades.test.eodhp.eco-ke-staging.com/cgi-bin/mapserv
    dataPath = /usr/com/zoo-project
    cacheDir =/tmp/zTmp
    templatesPath = /var/www/
    search_path=true

    [identification]
    title = ZOO-Project with Deploy, Replace, Undeploy and CWL support
    abstract_file=/var/www/header.md
    fees = None
    accessConstraints = none
    keywords = WPS,GIS,buffer

    [provider]
    providerName=ZOO-Project
    providerSite=http://www.zoo-project.org
    individualName=Gerald FENOY
    positionName=Developer
    role=Dev
    addressDeliveryPoint=1280, avenue des Platanes
    addressCity=Lattes
    addressAdministrativeArea=False
    addressPostalCode=34970
    addressCountry=fr
    addressElectronicMailAddress=gerald.fenoy@geolabs.fr
    phoneVoice=False
    phoneFacsimile=False


    [env]
    PYTHONPATH=/usr/miniconda3/envs/ades-dev/lib/python3.8/site-packages
    CONTEXT_DOCUMENT_ROOT=/usr/lib/cgi-bin/

    [database]
    dbname=zoo
    port=5432
    user=zoo
    password=zoo
    host=zoo-project-dru-postgresql
    type=PG
    schema=public

    [metadb]
    dbname=zoo
    port=5432
    user=zoo
    password=zoo
    host=zoo-project-dru-postgresql
    type=PG
    schema=public

    [security]
    attributes=Authorization,Cookie,User-Agent
    hosts=*

    [cookiecutter]
    configurationFile=/tmp/zTmp/cookiecutter_config.yaml
    templatesPath=/tmp/zTmp/cookiecutter-templates
    templateUrl=https://github.com/EOEPCA/eoepca-proc-service-template.git
    templateBranch=master


    [servicesNamespace]
    path= /opt/zooservices_user
    deploy_service_provider=DeployProcess
    undeploy_service_provider=UndeployProcess
    has_jwt_service=true
    sections_list=auth_env,additional_parameters,pod_env_vars,pod_node_selector,eoepca
    required_files=

    [eoepca]
    domain=192-168-67-2.nip.io

    [headers]
    X-Powered-By=ZOO-Project-DRU

    [rabbitmq]
    host=zoo-project-dru-rabbitmq
    port=5672
    user=guest
    passwd=guest
    exchange=amq.direct
    routingkey=zoo
    queue=zoo_service_queue

    [server]
    async_worker=70
  oapi-index.html: |-
    <!-- HTML for static distribution bundle build -->
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8">
        <title>Swagger UI</title>
        <link rel="stylesheet" type="text/css" href="./swagger-ui.css" />
        <link rel="stylesheet" type="text/css" href="index.css" />
        <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
        <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
        <style type="text/css">

          img { float:right ;}
          center img, td img { float:none; }

        </style>

      </head>

      <body>
        <div id="swagger-ui"></div>
        <!-- hhmts start -->Last modified: Wed Nov  1 21:48:20 CET 2023 <!-- hhmts end -->
        <script src="./swagger-ui-bundle.js" charset="UTF-8"> </script>
        <script src="./swagger-ui-standalone-preset.js" charset="UTF-8"> </script>
        <script src="./swagger-initializer.js" charset="UTF-8"> </script>
      </body>
    </html>
  oas.cfg: |-
    [openapi]
    use_content=false
    rootUrl=https://ades.test.eodhp.eco-ke-staging.com/ogc-api
    rootHost=https://ades.test.eodhp.eco-ke-staging.com
    rootPath=ogc-api
    links=/,/api,/conformance,/processes,/jobs
    paths=/root,/conformance,/api,/processes,/processes/water-bodies,/processes/{processID},/processes/water-bodies/execution,/processes/{processID}/execution,/jobs,/jobs/{jobID},/jobs/{jobID}/results
    parameters=processID,jobID,resultID
    header_parameters=oas-header1,oas-header2,oas-header3,oas-header4,oas-header5,limitParam,skipParam,processIdParam,statusParam,minDurationParam,maxDurationParam,typeParam,datetimeParam,wParam
    version=3.0.3
    license_name=OGC license
    license_url=https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/LICENSE
    full_html_support=false
    partial_html_support=false
    wsUrl=wss://ades.test.eodhp.eco-ke-staging.com:8888/
    publisherUrl=http://zookernel/cgi-bin/publish.py?jobid=
    link_href=http://zoo-project.org/dl/link.json
    tags=Browse the API,List - deploy - get detailed information about processes,Execute process - monitor job - access the result,Jobs management,Processes management,Other endpoints
    examplesPath=/var/www/html/examples/
    examplesUrl=https://ades.test.eodhp.eco-ke-staging.com/examples/
    exceptionsUrl=http://www.opengis.net/def/rel/ogc/1.0/exception
    exceptionsUrl_1=http://www.opengis.net/def/exceptions/ogcapi-processes-2/1.0
    use_problem_json_content_type_for_exception=true

    [tags]
    length=6
    value=From the landing page we can list links exposed by the API, it should contains a link to `/conformance` to use to know what are the server capabilities.
    value_1=From this section, we can list available processes, deploy new processes then get detailled description of the created process
    value_2=From this section, we can execute processes to create jobs, monitor these jobs during their execution then access the resulting data
    value_3=From this section, we can list or dismiss jobs
    value_4=From this section, we can modify or remove deployed processes
    value_5=From this section, we can access the process description and the execution endpoint for any processes

    [oas-header1]
    in=header
    name=Prefer
    type=string
    required=true
    enum=return=representation,return=minimal,respond-async;return=representation
    enum1=return=representation,return=minimal,respond-async;return=representation,respond-async;return=minimal

    [oas-header2]
    in=header
    name=Prefer
    type=string
    required=false
    enum=return=representation,return=minimal

    [oas-header3]
    in=header
    name=Prefer
    type=string
    required=true
    enum=respond-async;return=representation

    [oas-header4]
    in=header
    name=Prefer
    type=string
    required=true
    enum=return=minimal

    [oas-header5]
    in=header
    name=Prefer
    type=string
    required=true
    enum=return=representation

    [limitParam]
    name=limit
    title=The limit parameter
    abstract=The limit parameter indicates the number of elements to return in an array
    in=query
    type=integer
    schema_minimum=1
    schema_maximum=10000
    schema_default=1000
    required=false

    [skipParam]
    name=skip
    title=The skip parameter
    abstract=The skip parameter indicates the number of elements to skip before starting returning values in an array
    in=query
    type=integer
    schema_minimum=0
    required=false

    [wParam]
    name=w
    title=The workflow id parameter
    abstract=The workflow parameter indicates the name of an existing entry point within the CWL workflow definition associated with
    in=query
    type=string
    schema_default=water-bodies
    required=false

    [/]
    rel=self
    type=application/json
    title=this document

    [root]
    method=get
    title=landing page of this API
    abstract=The landing page provides links to the API definition, the Conformance statements and the metadata about the processes offered by this service.
    tags=Browse the API
    operationId=get_root
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/LandingPage.yaml

    [/index.html]
    rel=alternate
    type=text/html

    [/api]
    rel=service-desc
    type=application/vnd.oai.openapi+json;version=3.0
    title=the API definition

    [/api.html]
    rel=service-doc
    type=text/html

    [api.html]
    href=https://ades.test.eodhp.eco-ke-staging.com/swagger-ui/oapip/


    [api]
    method=get
    title=This document
    abstract=This document
    tags=Browse the API
    operationId=get_api
    schema=

    [/conformance]
    rel=http://www.opengis.net/def/rel/ogc/1.0/conformance
    type=application/json
    title=OGC API - Processes conformance classes implemented by this server

    [conformance]
    method=get
    title=information about standards that this API conforms to
    abstract=List all conformance classes specified in the OGC API - Processes - Part 1: Core standard that the server conforms to
    tags=Browse the API
    operationId=get_conformance
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ConformanceDeclaration.yaml

    [/conformance.html]
    rel=alternate
    type=text/html

    [/processes]
    rel=http://www.opengis.net/def/rel/ogc/1.0/processes
    type=application/json
    title=The processes offered by this server

    [processes]
    length=2
    method=get
    title=retrieve available processes
    abstract=Information about the available processes
    abstract_file=/var/www/processes-list.md
    tags=List - deploy - get detailed information about processes
    parameters=/components/parameters/limitParam,/components/parameters/skipParam
    schema=https://raw.githubusercontent.com/GeoLabs/ogcapi-processes/rel-1.0/core/openapi/responses/ProcessList.yaml
    method_1=post
    ecode_1=500
    code_1=201
    title_1=deploy a new processes
    abstract_1=Deploy a new processes
    abstract_file_1=/var/www/deploy.md
    tags_1=List - deploy - get detailed information about processes
    operationId_1=post_processes
    parameters_1=/components/parameters/wParam
    schema_1=https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/openapi/responses/processes-dru/rDeployProcess.yaml
    requestBody_length_1=2
    requestBody_1_1=requestBodyPkg
    examples_1_1=app-package.json
    examples_summary_1_1=Deploy water-bodies process using OGC Application Package encoding
    requestBody_1=requestBodyCwl
    examples_ref_1=https://raw.githubusercontent.com/EOEPCA/app-snuggs/main/app-package.cwl
    examples_1=app-package.cwl
    examples_summary_1=Deploy water-bodies process using the CWL Application Package encoding

    [/processes.html]
    rel=alternate
    type=text/html

    [processes/{processID}]
    prel=http://www.opengis.net/def/rel/iana/1.0/describedby
    rel=self
    length=3
    method=get
    ecode=404
    title=retrieve a process description
    abstract=A process description.
    tags=Other endpoints
    aoperationId=get_process__processID__
    schema=https://raw.githubusercontent.com/GeoLabs/ogcapi-processes/rel-1.0/core/openapi/responses/swagger/ProcessDescription.yaml
    parameters=/components/parameters/processID
    method_1=delete
    ecode_1=404
    code_1=204
    title_1=undeploy a mutable process
    abstract_1=Undeploy a mutable process.
    tags_1=Processes management
    aoperationId_1=delete_process__processID__
    parameters_1=/components/parameters/processID
    method_2=put
    ecode_2=404
    code_2=204
    aoperationId_2=put_process__processID__
    title_2=Update a mutable process
    requestBody_length_2=2
    requestBody_2=requestBodyPkg
    requestBody_2_1=requestBodyCwl
    abstract_2=Update a mutable process.
    tags_2=Processes management
    parameters_2=/components/parameters/processID
    examples_2=app-package.json
    examples_summary_2=Update water-bodies process
    examples_ref_2_1=https://raw.githubusercontent.com/EOEPCA/app-snuggs/main/app-package.cwl
    examples_2_1=app-package.cwl
    examples_summary_2_1=Update test water-bodies process

    [processes/water-bodies]
    prel=http://www.opengis.net/def/rel/iana/1.0/describedby
    pname=water-bodies
    length=1
    method=get
    ecode=404
    title=Retrieve the water-bodies process description
    abstract=The water-bodies process description.
    abstract_file=/var/www/processes-description.md
    tags=List - deploy - get detailed information about processes
    schema=https://raw.githubusercontent.com/GeoLabs/ogcapi-processes/rel-1.0/core/openapi/responses/swagger/ProcessDescription.yaml
    aparameters=/components/parameters/processID

    [processes/{processID}/execution]
    rel=http://www.opengis.net/def/rel/ogc/1.0/execute
    length=1
    ecode=400,404,500
    method=post
    title=execute a job
    abstract=An execute endpoint.
    tags=Other endpoints
    operationId=processes__processID__execution
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ExecuteSync.yaml
    parameters=/components/parameters/processID,/components/parameters/oas-header1
    requestBody=requestBody
    callbacksReference=callbacks

    [processes/water-bodies/execution]
    length=1
    method=post
    ecode=400,404,500
    pname=water-bodies
    title=execute water-bodies
    abstract=An execute endpoint.
    abstract_file=/var/www/execute.md
    tags=Execute process - monitor job - access the result
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/ExecuteSync.yaml
    parameters=/components/parameters/oas-header3
    callbacksReference=callbacks
    examples=job-order1.json
    examples_summary=Execute water-bodies with the presented stac item

    [/jobs]
    rel=http://www.opengis.net/def/rel/ogc/1.0/job-list
    type=application/json
    title=Job Management

    [jobs]
    length=1
    method=get
    ecode=500
    title=retrieve a list of jobs run
    abstract=A list of jobs run.
    tags=Jobs management
    operationId=get_jobs
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/JobList.yaml
    parameters=/components/parameters/limitParam,/components/parameters/skipParam,/components/parameters/processIdParam,/components/parameters/statusParam,/components/parameters/minDurationParam,/components/parameters/maxDurationParam,/components/parameters/typeParam,/components/parameters/datetimeParam

    [requestBody]
    abstract=Mandatory execute request in JSON format
    type=application/json
    schema=https://raw.githubusercontent.com/GeoLabs/ogcapi-processes/rel-1.0/core/openapi/schemas/execute.yaml

    [requestBodyPkg]
    abstract=Mandatory OGC Application Package in JSON format
    type=application/ogcapppkg+json
    schema=https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/openapi/schemas/processes-dru/ogcapppkg.yaml

    [requestBodyCwl]
    abstract=Mandatory OGC Application Package in CWL format
    type=application/cwl+yaml
    schema=https://raw.githubusercontent.com/common-workflow-language/schema_salad/main/schema_salad/metaschema/metaschema.yml

    [/jobs.html]
    rel=alternate
    type=text/html

    [/jobs/{jobID}]
    rel=canonical
    type=application/json
    title=Status

    [jobs/{jobID}]
    length=2
    method=get
    operationId=get_jobs__jobID_
    ecode=404,500
    title=The status of a job.
    abstract=The status of a job.
    abstract_file=/var/www/job-status.md
    tags=Execute process - monitor job - access the result
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/Status.yaml
    parameters=/components/parameters/jobID
    method_1=delete
    ecode_1=404,500
    title_1=Delete a job
    operationId_1=delete_jobs__jobID__
    abstract_1=Cancel the job execution.
    tags_1=Jobs management
    schema_1=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/Status.yaml
    parameters_1=/components/parameters/jobID

    [/jobs/{jobID}/results]
    rel=http://www.opengis.net/def/rel/ogc/1.0/results
    type=application/json
    title=Get Result

    [jobs/{jobID}/results]
    method=get
    operationId=get_jobs__jobID__results
    ecode=404,500
    title=The result of a job execution.
    abstract=The result of a job execution.
    abstract_file=/var/www/job-results.md
    tags=Execute process - monitor job - access the result
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/Results.yaml
    parameters=/components/parameters/jobID
    ep=,/components/parameters/oas-header2

    [{processID}]
    type=string
    title=The id of a process
    abstract=The id of a process
    in=path
    required=true
    example=water-bodies

    [{jobID}]
    type=string
    title=The id of a job
    abstract=The id of a job
    in=path
    required=true

    [{resultID}]
    type=string
    title=The id of an output
    abstract=The id of an output
    in=path
    required=true

    [statusParam]
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/parameters/status.yaml

    [processIdParam]
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/parameters/processIdQueryParam.yaml

    [minDurationParam]
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/parameters/minDuration.yaml

    [maxDurationParam]
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/parameters/maxDuration.yaml

    [typeParam]
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/parameters/type.yaml

    [datetimeParam]
    schema=https://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/parameters/datetime.yaml

    [{f}]
    default=json
    enum=json
    title=The optional f parameter
    abstract=The optional f parameter indicates the output format which the server shall provide as part of the response document.  The default format is JSON.
    in=query
    required=false

    [conformsTo]
    rootUrl=http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/
    extentionsLength=
    extentionUrl=http://www.opengis.net/spec/ogcapi-processes-2/1.0/conf/
    extentionUrl_1=http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/
    link=core
    link_1=oas30
    link_2=json
    link_3=job-list
    link_4=dismiss
    link_5=callback
    link_6=ogc-process-description
    link_7=deploy-replace-undeploy
    extention_7=true
    extid_7=0
    link_8=ogcapppkg
    extention_8=true
    extid_8=0
    link_9=cwl
    extention_9=true
    extid_9=0
    link_10=core
    extention_10=true
    extid_10=1
    link_11=landing-page
    extention_11=true
    extid_11=1
    link_12=oas30
    extention_12=true
    extid_12=1
    link_13=json
    extention_13=true
    extid_13=1
    length=14

    [exception]
    abstract=Exception
    type=application/json
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/responses/NotFound.yaml
    default_schema=https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/openapi/responses/common-core/rServerError.yaml

    [responses]
    length=7
    code=404
    schema=https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/openapi/responses/common-core/rNotFound.yaml
    type=application/json
    title=NotFound
    code_1=500
    schema_1=https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/openapi/responses/common-core/rServerError.yaml
    type_1=application/json
    title_1=ServerError
    code_2=400
    schema_2=https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/openapi/responses/common-core/rInvalidParameter.yaml
    type_2=appliction/json
    title_2=InvalidParameter
    code_3=405
    schema_3=https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/core/openapi/responses/NotAllowed.yaml
    type_3=appliction/json
    title_3=NotAllowed
    code_4=406
    schema_4=https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/core/openapi/responses/NotSupported.yaml
    type_4=appliction/json
    title_4=NotSupported
    code_5=401
    schema_5=https://raw.githubusercontent.com/ZOO-Project/ZOO-Project/master/thirds/openapi/responses/Unauthorized.yaml
    type_5=appliction/json
    title_5=Unauthorized
    code_6=403
    schema_6=https://raw.githubusercontent.com/ZOO-Project/ZOO-Project/master/thirds/openapi/responses/Forbidden.yaml
    type_6=appliction/json
    title_6=Forbidden


    [callbacks]
    length=3
    state=jobSuccess
    uri=successUri
    schema=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/results.yaml
    type=application/json
    title=Results received successfully
    state_1=jobInProgress
    uri_1=inProgressUri
    schema_1=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/statusInfo.yaml
    type_1=application/json
    title_1=Status received successfully
    state_2=jobFailed
    uri_2=failedUri
    schema_2=https://schemas.opengis.net/ogcapi/processes/part1/1.0/openapi/schemas/exception.yaml
    type_2=application/json
    title_2=Exception received successfully

    [provider_alt]
    addressDeliveryPoint=streetAddress
    addressCity=addressLocality
    addressAdministrativeArea=addressRegion
    addressPostalCode=postalCode
    addressCountry=addressCountry
    addressElectronicMailAddress=email
    phoneVoice=telephone
    phoneFacsimile=faxNumber
    hoursOfService=hoursAvailable
    contactInstructions=contactOption
    [filter_in]
    path=/usr/lib/cgi-bin
    service=securityIn
    [filter_out]
    path=/usr/lib/cgi-bin
    service=securityOut

    [links_title]
    self=View this document in JSON.
    alternate=View the alternative version in HTML.
    service-desc=View the service description.
    service-doc=View service documentation.
    processes=View the list of processes the API offers.
    results=View the results of a process.
    status=View the current status of a job execution.
    execute=View the execution endpoint of a process.
    job-list=View the list of job available on this server.
    conformance=View the conformance classes that the link's context conforms to.
  security_service.py: |-
    # -*- coding: utf-8 -*-
    ###############################################################################
    #  Author:   GÃ©rald Fenoy, gerald.fenoy@geolabs.fr
    #  Copyright (c) 2020-2023, GeoLabs SARL.
    ###############################################################################
    #  Permission is hereby granted, free of charge, to any person obtaining a
    #  copy of this software and associated documentation files (the "Software"),
    #  to deal in the Software without restriction, including without limitation
    #  the rights to use, copy, modify, merge, publish, distribute, sublicense,
    #  and/or sell copies of the Software, and to permit persons to whom the
    #  Software is furnished to do so, subject to the following conditions:
    #
    #  The above copyright notice and this permission notice shall be included
    #  in all copies or substantial portions of the Software.
    #
    #  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    #  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    #  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    #  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    #  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    #  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    #  DEALINGS IN THE SOFTWARE.
    ################################################################################
    import zoo


    def workspaceApi(conf, inputs, outputs):
        conf["additional_parameters"] = {}
        conf["additional_parameters"]["APP"] = "zoo-project-dru"
        conf["additional_parameters"]["STAGEIN_AWS_REGION"] = "RegionOne"
        conf["additional_parameters"]["STAGEIN_AWS_ACCESS_KEY_ID"] = "minio-admin"
        conf["additional_parameters"][
            "STAGEIN_AWS_SECRET_ACCESS_KEY"
        ] = "minio-secret-password"
        conf["additional_parameters"][
            "STAGEIN_AWS_SERVICEURL"
        ] = "http://s3-service.zoo.svc.cluster.local:9000"
        conf["additional_parameters"]["STAGEOUT_AWS_REGION"] = "RegionOne"
        conf["additional_parameters"]["STAGEOUT_AWS_ACCESS_KEY_ID"] = "minio-admin"
        conf["additional_parameters"][
            "STAGEOUT_AWS_SECRET_ACCESS_KEY"
        ] = "minio-secret-password"
        conf["additional_parameters"][
            "STAGEOUT_AWS_SERVICEURL"
        ] = "http://s3-service.zoo.svc.cluster.local:9000"
        conf["additional_parameters"]["STAGEOUT_OUTPUT"] = "s3://processingresults"
        return zoo.SERVICE_SUCCEEDED


    def securityIn(conf, inputs, outputs):
        import sys, os, shutil

        if "servicesNamespace" in conf and "debug" in conf["servicesNamespace"]:
            print("securityIn!", file=sys.stderr)
        workspaceApi(conf, inputs, outputs)
        conf["pod_env_vars"] = {"A": "1", "B": "2"}
        conf["pod_node_selector"] = {} #{"C": "3"}
        try:
            if (
                "has_jwt_service" in conf["servicesNamespace"]
                and conf["servicesNamespace"]["has_jwt_service"] == "true"
            ):
                import jwts.security_service as s

                res = s.securityIn(conf, inputs, outputs)
                s.addHeader(conf, "dru.securityIn")
                if res == zoo.SERVICE_FAILED:
                    return res
        except Exception as e:
            if "servicesNamespace" in conf and "debug" in conf["servicesNamespace"]:
                print("No JWT service available: " + str(e), file=sys.stderr)
        rPath = conf["servicesNamespace"]["path"] + "/"
        for i in conf["renv"]:
            if i.count("SERVICES_NAMESPACE"):
                rPath += conf["renv"][i]
                if "auth_env" not in conf:
                    conf["auth_env"] = {"user": conf["renv"][i], "cwd": rPath}
                else:
                    conf["auth_env"]["user"] = conf["renv"][i]
                    conf["auth_env"]["cwd"] = rPath
                conf["lenv"]["fpm_user"] = conf["renv"][i]
                conf["lenv"]["fpm_cwd"] = rPath
                # conf["lenv"]["cwd"]=rPath
                conf["zooServicesNamespace"] = {"namespace": conf["renv"][i], "cwd": rPath}
                break
        if not (os.path.isdir(rPath)):
            os.mkdir(rPath)
            if "required_files" in conf["servicesNamespace"]:
                rFiles = conf["servicesNamespace"]["required_files"].split(",")
                for i in range(len(rFiles)):
                    shutil.copyfile(
                        conf["renv"]["CONTEXT_DOCUMENT_ROOT"] + "/" + rFiles[i],
                        rPath + "/" + rFiles[i],
                    )
        try:
            print(conf["auth_env"], file=sys.stderr)
        except Exception as e:
            print(e, file=sys.stderr)
        return zoo.SERVICE_SUCCEEDED


    def securityOut(conf, inputs, outputs):
        import sys

        try:
            if (
                "has_jwt_service" in conf["servicesNamespace"]
                and conf["servicesNamespace"]["has_jwt_service"] == "true"
            ):
                import jwts.security_service as s

                s.addHeader(conf, "dru.securityOut")
        except Exception as e:
            if "servicesNamespace" in conf and "debug" in conf["servicesNamespace"]:
                print("No JWT service available: " + str(e), file=sys.stderr)
        if "servicesNamespace" in conf and "debug" in conf["servicesNamespace"]:
            print("securityOut!", file=sys.stderr)
        return zoo.SERVICE_SUCCEEDED
  swagger-initializer.js: "window.onload = function() {\n    //<editor-fold desc=\"Changeable
    Configuration Block\">\n  \n    // the following lines will be replaced by docker/configurator,
    when it runs in a docker-container\n    window.ui = SwaggerUIBundle({\n      url:
    \"https://ades.test.eodhp.eco-ke-staging.com/ogc-api/api\",\n      dom_id: '#swagger-ui',\n
    \     deepLinking: true,\n      presets: [\n        SwaggerUIBundle.presets.apis,\n
    \       SwaggerUIStandalonePreset\n      ],\n      plugins: [\n        SwaggerUIBundle.plugins.DownloadUrl\n
    \     ],\n      layout: \"StandaloneLayout\"\n    });\n  \n    //</editor-fold>\n
    \ };"
kind: ConfigMap
metadata:
  name: zoo-project-dru-zoo-project-config
  namespace: ades
---
apiVersion: v1
data:
  STAGEOUT_AWS_REGION: eu-west-2
  STAGEOUT_AWS_SERVICEURL: https://s3.eu-west-2.amazonaws.com
  STAGEOUT_OUTPUT: eodhp-ades
kind: ConfigMap
metadata:
  name: zoo-project-dru-zoofpm-config-chbgmhg85c
  namespace: ades
---
apiVersion: v1
kind: Secret
metadata:
  name: load-definition
  namespace: ades
stringData:
  load_definition.json: |-
    {
      "rabbit_version": "3.8.9",
      "rabbitmq_version": "3.8.9",
      "product_name": "RabbitMQ",
      "product_version": "3.8.9",
      "users": [
        {
          "name": "guest",
          "password_hash": "4+GY9SXaXs4JKn5uz0kVOQ/bklsy9dJRnxF2HwVco23TMFPg",
          "hashing_algorithm": "rabbit_password_hashing_sha256",
          "tags": "administrator"
        }
      ],
      "vhosts": [
        {
          "name": "/"
        }
      ],
      "permissions": [
        {
          "user": "guest",
          "vhost": "/",
          "configure": ".*",
          "write": ".*",
          "read": ".*"
        }
      ],
      "topic_permissions": [],
      "parameters": [],
      "global_parameters": [
        {
          "name": "cluster_name",
          "value": "rabbit@7ef77dc5021e"
        },
        {
          "name": "internal_cluster_id",
          "value": "rabbitmq-cluster-id-I25xJdt3QpmEFzeKaPqmdQ"
        }
      ],
      "policies": [],
      "queues": [
        {
          "name": "amq.gen-67C6b7LbpXCa_2JKu5hsbQ",
          "vhost": "/",
          "durable": false,
          "auto_delete": true,
          "arguments": {
            "x-message-ttl": 6000
          }
        },
        {
          "name": "amq.gen-A_NBM-thDA0ivfU5ni05eg",
          "vhost": "/",
          "durable": false,
          "auto_delete": true,
          "arguments": {
            "x-message-ttl": 6000
          }
        },
        {
          "name": "amq.gen--15Q21vMHiRYsrhyftTmVw",
          "vhost": "/",
          "durable": false,
          "auto_delete": true,
          "arguments": {
            "x-message-ttl": 6000
          }
        },
        {
          "name": "amq.gen-rsQm2-BNFiyT_1KEcDldsQ",
          "vhost": "/",
          "durable": false,
          "auto_delete": true,
          "arguments": {
            "x-message-ttl": 6000
          }
        },
        {
          "name": "zoo_service_queue",
          "vhost": "/",
          "durable": true,
          "auto_delete": false,
          "arguments": {
            "x-queue-type": "classic"
          }
        }
      ],
      "exchanges": [],
      "bindings": []
    }
type: Opaque
---
apiVersion: v1
data:
  password: em9v
  postgres-password: WjBBNmRwb2JGag==
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.5
  name: zoo-project-dru-postgresql
  namespace: ades
type: Opaque
---
apiVersion: v1
data:
  rabbitmq-erlang-cookie: NEc0WVBYaTZYWTRKT0I1UHZKRDZCZGxWS3prWXRXQ1Q=
  rabbitmq-password: Q0hBTkdFTUU=
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.12.10
    helm.sh/chart: rabbitmq-12.5.4
  name: zoo-project-dru-rabbitmq
  namespace: ades
type: Opaque
---
apiVersion: v1
data:
  rabbitmq.conf: IyMgVXNlcm5hbWUgYW5kIHBhc3N3b3JkCiMjCmRlZmF1bHRfdXNlciA9IFJBQkJJVE1RX1VTRVJOQU1FCiMjIENsdXN0ZXJpbmcKIyMKY2x1c3Rlcl9mb3JtYXRpb24ucGVlcl9kaXNjb3ZlcnlfYmFja2VuZCAgPSByYWJiaXRfcGVlcl9kaXNjb3ZlcnlfazhzCmNsdXN0ZXJfZm9ybWF0aW9uLms4cy5ob3N0ID0ga3ViZXJuZXRlcy5kZWZhdWx0CmNsdXN0ZXJfZm9ybWF0aW9uLm5vZGVfY2xlYW51cC5pbnRlcnZhbCA9IDEwCmNsdXN0ZXJfZm9ybWF0aW9uLm5vZGVfY2xlYW51cC5vbmx5X2xvZ193YXJuaW5nID0gdHJ1ZQpjbHVzdGVyX3BhcnRpdGlvbl9oYW5kbGluZyA9IGF1dG9oZWFsCgpjbHVzdGVyX2Zvcm1hdGlvbi50YXJnZXRfY2x1c3Rlcl9zaXplX2hpbnQgPSAxCgpsb2FkX2RlZmluaXRpb25zID0gL2FwcC9sb2FkX2RlZmluaXRpb24uanNvbgojIHF1ZXVlIG1hc3RlciBsb2NhdG9yCnF1ZXVlX21hc3Rlcl9sb2NhdG9yID0gbWluLW1hc3RlcnMKIyBlbmFibGUgbG9vcGJhY2sgdXNlcgpsb29wYmFja191c2Vycy5SQUJCSVRNUV9VU0VSTkFNRSA9IGZhbHNlCmxvYWRfZGVmaW5pdGlvbnMgPSAvYXBwL2xvYWRfZGVmaW5pdGlvbi5qc29uCg==
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.12.10
    helm.sh/chart: rabbitmq-12.5.4
  name: zoo-project-dru-rabbitmq-config
  namespace: ades
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: zoo-project-dru-kubeproxy
  namespace: ades
spec:
  ports:
  - name: http-kubeproxy
    port: 8001
    protocol: TCP
    targetPort: 8001
  selector:
    app.kubernetes.io/name: zoo-project-dru-kubeproxy
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.5
  name: zoo-project-dru-postgresql
  namespace: ades
spec:
  ports:
  - name: tcp-postgresql
    nodePort: null
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/name: postgresql
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.5
  name: zoo-project-dru-postgresql-hl
  namespace: ades
spec:
  clusterIP: None
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/name: postgresql
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.12.10
    helm.sh/chart: rabbitmq-12.5.4
  name: zoo-project-dru-rabbitmq
  namespace: ades
spec:
  ports:
  - name: amqp
    nodePort: null
    port: 5672
    targetPort: amqp
  - name: epmd
    nodePort: null
    port: 4369
    targetPort: epmd
  - name: dist
    nodePort: null
    port: 25672
    targetPort: dist
  - name: http-stats
    nodePort: null
    port: 15672
    targetPort: stats
  selector:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/name: rabbitmq
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.12.10
    helm.sh/chart: rabbitmq-12.5.4
  name: zoo-project-dru-rabbitmq-headless
  namespace: ades
spec:
  clusterIP: None
  ports:
  - name: epmd
    port: 4369
    targetPort: epmd
  - name: amqp
    port: 5672
    targetPort: amqp
  - name: dist
    port: 25672
    targetPort: dist
  - name: http-stats
    port: 15672
    targetPort: stats
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/name: rabbitmq
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zoo-project-dru
    app.kubernetes.io/version: 0.1.8
    helm.sh/chart: zoo-project-dru-0.2.6
  name: zoo-project-dru-service
  namespace: ades
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/name: zoo-project-dru
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: zoo-project-dru
    chart: zoo-project-dru-0.2.6
    heritage: Helm
    release: zoo-project-dru
  name: zoo-project-dru-processing-services
  namespace: ades
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: file-storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: zoo-project-dru
    chart: zoo-project-dru-0.2.6
    heritage: Helm
    release: zoo-project-dru
  name: zoo-project-dru-tmp-folder
  namespace: ades
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
  storageClassName: file-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: zoo-project-dru-kubeproxy
  name: zoo-project-dru-kubeproxy
  namespace: ades
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: zoo-project-dru-kubeproxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zoo-project-dru-kubeproxy
    spec:
      containers:
      - image: eoepca/kubectl-proxy:latest
        name: zoo-project-dru-kubeproxy
        ports:
        - containerPort: 8001
        securityContext: {}
      restartPolicy: Always
      securityContext: {}
      serviceAccountName: zoo-project-dru-processing-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru-zoofpm
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zoo-project-dru-zoofpm
    app.kubernetes.io/version: 0.1.8
  name: zoo-project-dru-zoofpm
  namespace: ades
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: zoo-project-dru-zoofpm
      app.kubernetes.io/name: zoo-project-dru-zoofpm
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/cm-cwlwrapper-assets: 6bce43d5405fc7e4418e27fc36e697403fd1cbc330828c3599eda9fe98856092
        checksum/cm-openapi-config: ad51bab1ea8da9072e3501d93dc816712eb3ddb80a58375de0a5844947599a02
        checksum/cm-zoo-deploy-service-config: 853a04151ef0a5c86a75344391d738bcb0e7c6d82a1f8ced3fa2ad42aac4fb1d
        checksum/cm-zoo-project-config: 04475b0e1c88789ab1cc1c95b1266a859c9b2b888ffe840cd05aacb508da4f99
      labels:
        app.kubernetes.io/instance: zoo-project-dru-zoofpm
        app.kubernetes.io/name: zoo-project-dru-zoofpm
    spec:
      containers:
      - command:
        - /startup.sh
        env:
        - name: ZOO_RABBITMQ_HOST
          value: zoo-project-dru-rabbitmq
        - name: STORAGE_CLASS
          value: file-storage
        - name: DEFAULT_VOLUME_SIZE
          value: "10190"
        - name: DEFAULT_MAX_RAM
          value: "1024"
        - name: DEFAULT_MAX_CORES
          value: "4"
        - name: CALRISSIAN_IMAGE
          value: terradue/calrissian:0.12.0
        - name: WRAPPER_STAGE_IN
          value: /assets/stagein.yaml
        - name: WRAPPER_STAGE_OUT
          value: /assets/stageout.yaml
        - name: WRAPPER_RULES
          value: /assets/rules.yaml
        - name: WRAPPER_MAIN
          value: /assets/main.yaml
        - name: HTTP_PROXY
          value: http://zoo-project-dru-kubeproxy.ades.svc.cluster.local:8001
        - name: PGHOST
          value: zoo-project-dru-postgresql-hl
        - name: PGDATABASE
          value: zoo
        - name: PGPASSWORD
          value: zoo
        - name: PGUSER
          value: zoo
        - name: PGPORT
          value: "5432"
        - name: STAGEIN_AWS_ACCESS_KEY_ID
          value: test
        - name: STAGEIN_AWS_REGION
          value: RegionOne
        - name: STAGEIN_AWS_SECRET_ACCESS_KEY
          value: test
        - name: STAGEIN_AWS_SERVICEURL
          value: http://data.cloudferro.com
        - name: STAGEOUT_AWS_SERVICEURL
          valueFrom:
            configMapKeyRef:
              key: STAGEOUT_AWS_SERVICEURL
              name: zoo-project-dru-zoofpm-config-chbgmhg85c
        - name: STAGEOUT_AWS_REGION
          valueFrom:
            configMapKeyRef:
              key: STAGEOUT_AWS_REGION
              name: zoo-project-dru-zoofpm-config-chbgmhg85c
        - name: STAGEOUT_OUTPUT
          valueFrom:
            configMapKeyRef:
              key: STAGEOUT_OUTPUT
              name: zoo-project-dru-zoofpm-config-chbgmhg85c
        - name: STAGEOUT_AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: workflowExecutor.inputs.STAGEOUT_AWS_ACCESS_KEY_ID
              name: ades-secret
        - name: STAGEOUT_AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: workflowExecutor.inputs.STAGEOUT_AWS_SECRET_ACCESS_KEY
              name: ades-secret
        image: zooproject/zoo-project:eoepca-092ea7a2c6823dba9c6d52c383a73f5ff92d0762
        imagePullPolicy: IfNotPresent
        name: zoofpm
        resources: {}
        volumeMounts:
        - mountPath: /usr/lib/cgi-bin/main.cfg
          name: zoo-project-config
          subPath: main.cfg
        - mountPath: /usr/lib/cgi-bin/oas.cfg
          name: zoo-project-config
          subPath: oas.cfg
        - mountPath: /startup.sh
          name: bin-config
          subPath: start-up.sh
        - mountPath: /tmp/zTmp/cookiecutter_config.yaml
          name: zoo-deploy-service-config
          subPath: cookiecutter_config.yaml
        - mountPath: /assets/main.yaml
          name: cwlwrapper-config
          subPath: main.yaml
        - mountPath: /assets/rules.yaml
          name: cwlwrapper-config
          subPath: rules.yaml
        - mountPath: /assets/stagein.yaml
          name: cwlwrapper-config
          subPath: stagein.yaml
        - mountPath: /assets/stageout.yaml
          name: cwlwrapper-config
          subPath: stageout.yaml
        - mountPath: /opt/zooservices_user
          name: ades-processing-services
        - mountPath: /tmp/zTmp
          name: tmp-folder
      initContainers:
      - args:
        - wait_for
        - rabbitmq:zoo-project-dru-rabbitmq
        command:
        - /docker-entrypoint.sh
        env:
        - name: ZOO_RABBITMQ_HOST
          value: zoo-project-dru-rabbitmq
        image: docker.io/wshihadeh/wait_for:latest
        imagePullPolicy: IfNotPresent
        name: init-wait-for-dependencies-zoofpm
      restartPolicy: Always
      serviceAccountName: zoo-project-dru-processing-manager
      volumes:
      - configMap:
          name: zoo-project-dru-zoo-kernel-config
        name: zoo-kernel-config
      - configMap:
          name: zoo-project-dru-openapi-config
        name: openapi-config
      - configMap:
          name: zoo-project-dru-zoo-deploy-service-config
        name: zoo-deploy-service-config
      - configMap:
          name: zoo-project-dru-cwlwrapper-config
        name: cwlwrapper-config
      - configMap:
          defaultMode: 484
          name: zoo-project-dru-bin-config
        name: bin-config
      - configMap:
          name: zoo-project-dru-zoo-project-config
        name: zoo-project-config
      - name: tmp-folder
        persistentVolumeClaim:
          claimName: zoo-project-dru-tmp-folder
      - name: ades-processing-services
        persistentVolumeClaim:
          claimName: zoo-project-dru-processing-services
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zoo-project-dru
    app.kubernetes.io/version: 0.1.8
    helm.sh/chart: zoo-project-dru-0.2.6
  name: zoo-project-dru-zookernel
  namespace: ades
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: zoo-project-dru
      app.kubernetes.io/name: zoo-project-dru
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/cm-cwlwrapper-assets: 6bce43d5405fc7e4418e27fc36e697403fd1cbc330828c3599eda9fe98856092
        checksum/cm-openapi-config: ad51bab1ea8da9072e3501d93dc816712eb3ddb80a58375de0a5844947599a02
        checksum/cm-zoo-deploy-service-config: 853a04151ef0a5c86a75344391d738bcb0e7c6d82a1f8ced3fa2ad42aac4fb1d
        checksum/cm-zoo-project-config: 04475b0e1c88789ab1cc1c95b1266a859c9b2b888ffe840cd05aacb508da4f99
      labels:
        app.kubernetes.io/instance: zoo-project-dru
        app.kubernetes.io/name: zoo-project-dru
    spec:
      containers:
      - args:
        - -D
        - FOREGROUND
        command:
        - apachectl
        env:
        - name: ZOO_REDIS_HOST
          value: zoo-project-dru-redis-master
        image: zooproject/zoo-project:eoepca-092ea7a2c6823dba9c6d52c383a73f5ff92d0762
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: http
        name: zookernel
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: http
        resources: {}
        volumeMounts:
        - mountPath: /usr/lib/cgi-bin/main.cfg
          name: zoo-project-config
          subPath: main.cfg
        - mountPath: /usr/lib/cgi-bin/oas.cfg
          name: zoo-project-config
          subPath: oas.cfg
        - mountPath: /var/www/html/.htaccess
          name: zoo-project-config
          subPath: htaccess
        - mountPath: /var/www/html/swagger-ui/oapip/index.html
          name: zoo-project-config
          subPath: oapi-index.html
        - mountPath: /var/www/html/swagger-ui/oapip/swagger-initializer.js
          name: zoo-project-config
          subPath: swagger-initializer.js
        - mountPath: /usr/lib/cgi-bin/security_service.py
          name: zoo-project-config
          subPath: security_service.py
        - mountPath: /var/www/html/examples/post_processes/app-package.cwl
          name: zoo-example-config
          subPath: app-package.cwl
        - mountPath: /var/www/html/examples/post_processes/app-package.json
          name: zoo-example-config
          subPath: app-package.json
        - mountPath: /var/www/html/examples/app-package.cwl
          name: zoo-example-config
          subPath: app-package.cwl
        - mountPath: /var/www/html/examples/app-package.json
          name: zoo-example-config
          subPath: app-package.json
        - mountPath: /var/www/html/examples/water-bodies/job-order1.json
          name: zoo-example-config
          subPath: job-order1.json
        - mountPath: /var/www/header.md
          name: openapi-config
          subPath: header.md
        - mountPath: /var/www/header-secured.md
          name: openapi-config
          subPath: header-secured.md
        - mountPath: /var/www/processes-list.md
          name: openapi-config
          subPath: processes-list.md
        - mountPath: /var/www/deploy.md
          name: openapi-config
          subPath: deploy.md
        - mountPath: /var/www/processes-description.md
          name: openapi-config
          subPath: processes-description.md
        - mountPath: /var/www/execute.md
          name: openapi-config
          subPath: execute.md
        - mountPath: /var/www/job-status.md
          name: openapi-config
          subPath: job-status.md
        - mountPath: /var/www/job-results.md
          name: openapi-config
          subPath: job-results.md
        - mountPath: /tmp/zTmp/cookiecutter_config.yaml
          name: zoo-deploy-service-config
          subPath: cookiecutter_config.yaml
        - mountPath: /opt/zooservices_user
          name: ades-processing-services
        - mountPath: /tmp/zTmp
          name: tmp-folder
      initContainers:
      - args:
        - wait_for
        - rabbitmq:zoo-project-dru-rabbitmq
        command:
        - /docker-entrypoint.sh
        env:
        - name: ZOO_RABBITMQ_HOST
          value: zoo-project-dru-rabbitmq
        image: docker.io/wshihadeh/wait_for:latest
        imagePullPolicy: IfNotPresent
        name: init-wait-for-dependencies-zookernel
      restartPolicy: Always
      volumes:
      - configMap:
          defaultMode: 511
          name: zoo-project-dru-bin-config
        name: bin-config
      - configMap:
          name: zoo-project-dru-zoo-project-config
        name: zoo-project-config
      - configMap:
          name: zoo-project-dru-zoo-example-config
        name: zoo-example-config
      - configMap:
          name: zoo-project-dru-openapi-config
        name: openapi-config
      - configMap:
          name: zoo-project-dru-zoo-deploy-service-config
        name: zoo-deploy-service-config
      - name: tmp-folder
        persistentVolumeClaim:
          claimName: zoo-project-dru-tmp-folder
      - name: ades-processing-services
        persistentVolumeClaim:
          claimName: zoo-project-dru-processing-services
status: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: primary
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.5
  name: zoo-project-dru-postgresql
  namespace: ades
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: zoo-project-dru
      app.kubernetes.io/name: postgresql
  serviceName: zoo-project-dru-postgresql-hl
  template:
    metadata:
      labels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: zoo-project-dru
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.1.0
        helm.sh/chart: postgresql-13.2.5
      name: zoo-project-dru-postgresql
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: primary
                  app.kubernetes.io/instance: zoo-project-dru
                  app.kubernetes.io/name: postgresql
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: /bitnami/postgresql
        - name: PGDATA
          value: /bitnami/postgresql/data
        - name: POSTGRES_USER
          value: zoo
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: zoo-project-dru-postgresql
        - name: POSTGRES_POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: zoo-project-dru-postgresql
        - name: POSTGRES_DATABASE
          value: zoo
        - name: POSTGRESQL_ENABLE_LDAP
          value: "no"
        - name: POSTGRESQL_ENABLE_TLS
          value: "no"
        - name: POSTGRESQL_LOG_HOSTNAME
          value: "false"
        - name: POSTGRESQL_LOG_CONNECTIONS
          value: "false"
        - name: POSTGRESQL_LOG_DISCONNECTIONS
          value: "false"
        - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
          value: "off"
        - name: POSTGRESQL_CLIENT_MIN_MESSAGES
          value: error
        - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
          value: pgaudit
        image: docker.io/bitnami/postgresql:16.1.0-debian-11-r0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "zoo" -d "dbname=zoo" -h 127.0.0.1 -p 5432
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: postgresql
        ports:
        - containerPort: 5432
          name: tcp-postgresql
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "zoo" -d "dbname=zoo" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits: {}
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /docker-entrypoint-initdb.d/
          name: custom-init-scripts
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /bitnami/postgresql
          name: data
      hostIPC: false
      hostNetwork: false
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      volumes:
      - configMap:
          name: postgresql-primary-init-scripts
        name: custom-init-scripts
      - emptyDir:
          medium: Memory
        name: dshm
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
      storageClassName: block-storage
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.12.10
    helm.sh/chart: rabbitmq-12.5.4
  name: zoo-project-dru-rabbitmq
  namespace: ades
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: zoo-project-dru
      app.kubernetes.io/name: rabbitmq
  serviceName: zoo-project-dru-rabbitmq-headless
  template:
    metadata:
      annotations:
        checksum/config: c59dfe89d52c76f4f15dd306574acfb077dc0ef64a751318f312440686abbf8c
        checksum/secret: 49706aaf34ac451f7f31bd249076d76cfdf3f25419ca1255b43d033c5b2cd66f
      labels:
        app.kubernetes.io/instance: zoo-project-dru
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        app.kubernetes.io/version: 3.12.10
        helm.sh/chart: rabbitmq-12.5.4
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: zoo-project-dru
                  app.kubernetes.io/name: rabbitmq
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_SERVICE_NAME
          value: zoo-project-dru-rabbitmq-headless
        - name: K8S_ADDRESS_TYPE
          value: hostname
        - name: RABBITMQ_FORCE_BOOT
          value: "no"
        - name: RABBITMQ_NODE_NAME
          value: rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
        - name: K8S_HOSTNAME_SUFFIX
          value: .$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
        - name: RABBITMQ_MNESIA_DIR
          value: /bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)
        - name: RABBITMQ_LDAP_ENABLE
          value: "no"
        - name: RABBITMQ_LOGS
          value: '-'
        - name: RABBITMQ_ULIMIT_NOFILES
          value: "65536"
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        - name: RABBITMQ_ERL_COOKIE
          valueFrom:
            secretKeyRef:
              key: rabbitmq-erlang-cookie
              name: zoo-project-dru-rabbitmq
        - name: RABBITMQ_LOAD_DEFINITIONS
          value: "yes"
        - name: RABBITMQ_DEFINITIONS_FILE
          value: /app/load_definition.json
        - name: RABBITMQ_SECURE_PASSWORD
          value: "yes"
        - name: RABBITMQ_USERNAME
          value: RABBITMQ_USERNAME
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              key: rabbitmq-password
              name: zoo-project-dru-rabbitmq
        - name: RABBITMQ_PLUGINS
          value: rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap
        envFrom: null
        image: docker.io/bitnami/rabbitmq:3.12.10-debian-11-r0
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -ec
              - |
                if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d "false"
                else
                    rabbitmqctl stop_app
                fi
        livenessProbe:
          exec:
            command:
            - sh
            - -ec
            - rabbitmq-diagnostics -q ping
          failureThreshold: 6
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 20
        name: rabbitmq
        ports:
        - containerPort: 5672
          name: amqp
        - containerPort: 25672
          name: dist
        - containerPort: 15672
          name: stats
        - containerPort: 4369
          name: epmd
        readinessProbe:
          exec:
            command:
            - sh
            - -ec
            - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 20
        resources:
          limits: {}
          requests: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1001
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /bitnami/rabbitmq/conf
          name: configuration
        - mountPath: /bitnami/rabbitmq/mnesia
          name: data
        - mountPath: /app
          name: load-definition-volume
          readOnly: true
      enableServiceLinks: true
      initContainers: null
      securityContext:
        fsGroup: 1001
      serviceAccountName: zoo-project-dru-rabbitmq
      terminationGracePeriodSeconds: 120
      volumes:
      - name: configuration
        projected:
          sources:
          - secret:
              name: zoo-project-dru-rabbitmq-config
      - name: load-definition-volume
        secret:
          secretName: load-definition
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app.kubernetes.io/instance: zoo-project-dru
        app.kubernetes.io/name: rabbitmq
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
      storageClassName: block-storage
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ades
  namespace: ades
spec:
  data:
  - remoteRef:
      key: eodhp-test
      property: ades.workflowExecutor.inputs.STAGEOUT_AWS_ACCESS_KEY_ID
    secretKey: workflowExecutor.inputs.STAGEOUT_AWS_ACCESS_KEY_ID
  - remoteRef:
      key: eodhp-test
      property: ades.workflowExecutor.inputs.STAGEOUT_AWS_SECRET_ACCESS_KEY
    secretKey: workflowExecutor.inputs.STAGEOUT_AWS_SECRET_ACCESS_KEY
  refreshInterval: 1m
  secretStoreRef:
    kind: ClusterSecretStore
    name: secret-store
  target:
    name: ades-secret
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: basic-auth
  namespace: ades
spec:
  data:
  - remoteRef:
      key: eodhp-test
      property: ades.ingress.annotations.auth
    secretKey: auth
  refreshInterval: 1m
  secretStoreRef:
    kind: ClusterSecretStore
    name: secret-store
  target:
    name: basic-auth
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: lets-encrypt
    ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/auth-realm: Authentication Required
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zoo-project-dru
    app.kubernetes.io/version: 0.1.8
    helm.sh/chart: zoo-project-dru-0.2.6
  name: zoo-project-dru
  namespace: ades
spec:
  ingressClassName: nginx
  rules:
  - host: ades.test.eodhp.eco-ke-staging.com
    http:
      paths:
      - backend:
          service:
            name: zoo-project-dru-service
            port:
              number: 80
        path: /
        pathType: ImplementationSpecific
  tls:
  - hosts:
    - ades.test.eodhp.eco-ke-staging.com
    secretName: ades-secret
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
  labels:
    app.kubernetes.io/instance: zoo-project-dru
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: zoo-project-dru
    app.kubernetes.io/version: 0.1.8
    helm.sh/chart: zoo-project-dru-0.2.6
  name: zoo-project-dru-test-connection
  namespace: ades
spec:
  containers:
  - args:
    - -c
    - let status=1; while test $status -ne 0; do wget -T 5 zoo-project-dru-service:80;
      let status=$?; sleep 5; done
    command:
    - sh
    image: busybox
    name: wget
  restartPolicy: Never
